{"version":3,"sources":["routes/Tables/PatientsTable/index.js"],"names":["insuranceList","pharmaciesList","family_doctorsList","resourcesList","servicesList","PatientsTable","props","onChangeResources","event","setState","selected","target","value","onChangeServices","selectedservice","state","columns","title","field","render","rowData","src","picture","defaultUrl","className","editComponent","type","onChange","e","files","selectedResources","JSON","parse","resources","map","index","key","id","isEditResources","data","lookup","selectedServices","services","console","log","currentService","isEditServices","size","color","checked","serviceplan","isEditServiceplan","this","user","localStorage","getItem","instance_id","userService","showPatients","pagination","then","res","ele","family_doctors","doctorName","insurances","pharmacies","pharmacyName","prevState","patients","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","stringify","formData","FormData","append","addPatients","old","push","onRowUpdate","oldData","editPatients","indexOf","onRowDelete","deletePatients","splice","Component"],"mappings":"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","file":"static/js/55.f89322dd.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nlet insuranceList = {};\r\nlet pharmaciesList = {};\r\nlet family_doctorsList = {};\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation' },\r\n            { title: 'First Name', field: 'firstName' },\r\n            { title: 'Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n            { title: 'Birthday', field: 'birthday' },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={resourcesList}\r\n                        value={this.state.selected}\r\n                        onChange={this.onChangeResources}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: 'Insurance', field: 'insurance', lookup: insuranceList\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           servicesList.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        data={servicesList}\r\n                        value={this.state.selectedservice}\r\n                        onChange={this.onChangeServices}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: 'Family Doctor', field: 'familyDoctor', lookup: family_doctorsList\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare'\r\n            },\r\n            {\r\n               title: 'Pharmacy', field: 'pharmacy', lookup: pharmaciesList\r\n            },\r\n            { title: 'User group', field: 'userGroup' },\r\n            { title: 'Status', field: 'status' },\r\n            {\r\n               title: 'Serviceplan', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditServiceplan: true,\r\n         serviceplan: true\r\n\r\n      };\r\n\r\n\r\n   }\r\n\r\n   onChangeResources = (event) => {\r\n      this.setState({\r\n         selected: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeServices = (event) => {\r\n      this.setState({\r\n         selectedservice: [...event.target.value]\r\n      });\r\n   }\r\n   componentDidMount() {\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         resourcesList = [];\r\n         servicesList = [];\r\n         servicesList = res.services.map(ele => {\r\n            return ele.services\r\n         });\r\n\r\n         resourcesList = res.resources.map(ele => {\r\n            return ele.resources;\r\n         })\r\n\r\n         res.family_doctors.map(ele => {\r\n            family_doctorsList[ele.doctorName] = ele.doctorName;\r\n         })\r\n\r\n         res.insurances.map(ele => {\r\n            insuranceList[ele.insurances] = ele.insurances;\r\n         })\r\n\r\n\r\n         res.pharmacies.map(ele => {\r\n            pharmaciesList[ele.pharmacyName] = ele.pharmacyName;\r\n         })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            return { ...prevState, data };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 const formData = new FormData()\r\n                                 formData.append('file', newData.picture);\r\n                                 newData.picture = '';\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 userService.addPatients(formData).then(res => {\r\n                                    const selected = [];\r\n                                    const selectedservice = [];\r\n                                    this.setState(prevState => {\r\n                                       const old = [...prevState.data];\r\n                                       let data = [];\r\n                                       data.push(res);\r\n                                       [...data] = [...data, ...old];\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                    this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true });\r\n                                 });\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 formData.append('data', JSON.stringify(newData));\r\n\r\n                                 userService.editPatients(formData).then(res => {\r\n                                    if (oldData) {\r\n                                       this.setState(prevState => {\r\n                                          const data = [...prevState.data];\r\n                                          data[data.indexOf(oldData)] = res;\r\n                                          return { ...prevState, data };\r\n                                       });\r\n                                       const selected = [];\r\n                                       const selectedservice = [];\r\n                                       this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true });\r\n                                    }\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}