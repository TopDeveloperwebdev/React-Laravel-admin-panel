{"version":3,"sources":["routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/PatientsTable/index.js"],"names":["PreviewDialgo","props","state","open","instance","title","content","this","setState","isTrue","logo","split","onClose","closeDialog","bind","aria-labelledby","className","onClick","onCloseDialog","id","selectedDocumentList","map","element","index","key","bgcolor","textAlign","variant","instanceName","pt","fontSize","dangerouslySetInnerHTML","__html","email","React","Component","insuranceList","pharmaciesList","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollst√§ndig","family_doctorsList","resourcesList","servicesList","usersList","PatientsTable","handleChangeDate","event","birthday","target","value","onChangeDoctor","familyDoctor","onChangePharmacies","pharmacy","onChangeInsurance","insurance","onChangeResources","selected","onChangeUsers","selectedUsers","onChangeServices","selectedservice","columns","field","render","rowData","src","picture","defaultUrl","editComponent","type","onChange","e","files","lookup","defaultValue","InputLabelProps","shrink","selectedResources","JSON","parse","resources","isEditResources","data","placeholder","selectedServices","services","previewDocument","console","log","currentService","isEditServices","userGroup","isEditUsers","size","color","checked","serviceplan","isEditServiceplan","documentsList","folders","downloadDocs","preViewDialog","createRef","relationDocs","forEach","folder","indexOf","service","folderDocs","documents","relationDocsTemps","concat","Set","filter","a","current","openDialog","setTimeout","generatePdf","length","documentsLen","formate","div","document","getElementById","domtoimage","toPng","then","dataUrl","HTML_Height","clientHeight","pdf","jsPDF","canvas_image_height","totalPDFPages","Math","ceil","addImage","canvas_image_width","i","addPage","top_left_margin","save","pageHight","ipageHight","style","paddingBottom","user","localStorage","getItem","instance_id","userService","showPatients","pagination","res","ele","users","name","family_doctors","doctorName","insurances","pharmacies","pharmacyName","prevState","patients","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","stringify","firstName","lastName","phone1","phone2","formData","FormData","append","addPatients","push","catch","error","alert","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","ref"],"mappings":"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","file":"static/js/38.e56f4cd6.chunk.js","sourcesContent":["/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: ''\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t<Box bgcolor=\"background.paper\" className={`title-banner`} >\r\n\t\t\t\t\t\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box className=\"title-content\" textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <img src={this.getUrl(element.instanceLogo)} /> */}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t<Box className=\"p-10\">\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\" className=\"title\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t<Box className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t<Box bgcolor=\"background.paper\" className={`title-banner`} >\r\n\t\t\t\t\t\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box className=\"title-content\" textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Container>\r\n\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\nimport { AutoComplete, MultiSelect } from '@progress/kendo-react-dropdowns';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { jsPDF } from \"jspdf\";\r\nimport domtoimage from 'dom-to-image';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\n\r\n\r\nlet insuranceList = [];\r\nlet pharmaciesList = [];\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollst√§ndig: 'Unvollst√§ndig' };\r\nlet family_doctorsList = {};\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation', lookup: salutationList },\r\n            { title: '*First Name', field: 'firstName' },\r\n            { title: '*Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n\r\n            {\r\n               title: 'Birthday', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {rowData.birthday}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: '*Phone 1', field: 'phone1' },\r\n            { title: '*Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={resourcesList}\r\n                        value={this.state.selected}\r\n                        onChange={this.onChangeResources}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Insurance', field: 'insurance', editComponent: rowData => {\r\n                  return (<AutoComplete data={insuranceList} placeholder=\"Select Insurance\" onChange={this.onChangeInsurance} />)\r\n               }\r\n            },\r\n            {\r\n               title: '*Insurance Nr', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              servicesList.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList)} />\r\n                        </div>\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        data={servicesList}\r\n                        value={this.state.selectedservice}\r\n                        onChange={this.onChangeServices}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Family Doctor', field: 'familyDoctor', editComponent: rowData => {\r\n                  return (<AutoComplete data={family_doctorsList} placeholder=\"Select Family doctor\" onChange={this.onChangeDoctor} />)\r\n               }\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Pharmacy', field: 'pharmacy', editComponent: rowData => {\r\n                  return (<AutoComplete data={pharmaciesList} placeholder=\"Select Pharmacy\" onChange={this.onChangePharmacies} />)\r\n               }\r\n            },\r\n            {\r\n               title: 'User group', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Serviceplan', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: []\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n   }\r\n   previewDocument(services) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            let relationDocsTemps = [...relationDocs];\r\n            console.log('folderDocs', folderDocs, relationDocsTemps);\r\n            relationDocs = relationDocsTemps.concat(folderDocs);\r\n         }\r\n      });\r\n      relationDocs = [...new Set(relationDocs)];\r\n      if (relationDocs) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            // let pdfDiv = document.getElementById('downloadArea');\r\n            // console.log('pdf' , pdfDiv);\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n         }, 2000);\r\n      }\r\n   }\r\n   generatePdf(documentsLen) {\t\r\n\t\tvar pageHight = 1123;\r\n\t\tthis.formate(documentsLen, pageHight);\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst div = document.getElementById(\"downloadArea\");\r\n\t\t\tdomtoimage.toPng(div).then((dataUrl) => {\t\t\t\t\r\n\t\t\t\tlet HTML_Height = document.getElementById(\"downloadArea\").clientHeight;\r\n\t\t\t\tvar pdf = new jsPDF(\"p\", \"pt\", [794 , 1123]);\t\t\t\r\n\t\t\t\tvar canvas_image_width = 794;\t\t\t\r\n\t\t\t\tvar canvas_image_height = HTML_Height;\t\t\t\t\r\n\t\t\t\tvar totalPDFPages = Math.ceil(canvas_image_height / pageHight) - 1;\r\n\t\t\t\tlet top_left_margin = 10;\r\n\t\t\t\tpdf.addImage(dataUrl, 'JPG', top_left_margin, top_left_margin, canvas_image_width - 3 * top_left_margin, canvas_image_height);\r\n\r\n\t\t\t\tfor (var i = 1; i <= totalPDFPages; i++) {\r\n\t\t\t\t\tpdf.addPage();\r\n\t\t\t\t\tpdf.addImage(dataUrl, 'JPG', top_left_margin, -(pageHight * i) + (top_left_margin * 2), canvas_image_width - 2 * top_left_margin, canvas_image_height - 2 * top_left_margin);\r\n\t\t\t\t}\r\n\t\t\t\tpdf.save(\"HTML-Document.pdf\");\r\n\t\t\t})\r\n\t\t}, 1000);\r\n\r\n\r\n\t}\r\n\tformate(documentsLen, pageHight ) {\t\r\n\t\tfor (let i = 0; i < documentsLen; i++) {\r\n\t\t\tlet ipageHight = document.getElementById(\"page-\" + i).clientHeight;\t\t\t\t\r\n\t\t\tif (ipageHight > pageHight) {\t\r\n\t\t\t\tdocument.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event) => {\r\n      this.setState({ familyDoctor: event.target.value })\r\n   }\r\n   onChangePharmacies = (event) => {\r\n      this.setState({ pharmacy: event.target.value })\r\n   }\r\n\r\n   onChangeInsurance = (event) => {\r\n      this.setState({ insurance: event.target.value });\r\n   }\r\n   onChangeResources = (event) => {\r\n      this.setState({\r\n         selected: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      this.setState({\r\n         selectedUsers: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeServices = (event) => {\r\n      this.setState({\r\n         selectedservice: [...event.target.value]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         resourcesList = [];\r\n         servicesList = [];\r\n         servicesList = res.services.map(ele => {\r\n            return ele.services\r\n         });\r\n\r\n         resourcesList = res.resources.map(ele => {\r\n            return ele.resources;\r\n         })\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         family_doctorsList = res.family_doctors.map(ele => {\r\n            return ele.doctorName;\r\n         })\r\n\r\n\r\n         insuranceList = res.insurances.map(ele => {\r\n            return ele.insurances;\r\n         })\r\n         pharmaciesList = res.pharmacies.map(ele => {\r\n            return ele.pharmacyName;\r\n         })\r\n\r\n\r\n         // res.insurances.map(ele => {\r\n         //    insuranceList[ele.insurances] = ele.insurances;\r\n         // })\r\n\r\n\r\n         // res.pharmacies.map(ele => {\r\n         //    pharmaciesList[ele.pharmacyName] = ele.pharmacyName;\r\n         // })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                                 newData.insurance = this.state.insurance;\r\n                                 newData.familyDoctor = this.state.familyDoctor;\r\n                                 newData.pharmacy = this.state.pharmacy;\r\n                                 newData.birthday = this.state.birthday;\r\n                                 if (this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName && newData.phone1 && newData.phone2) {\r\n                                    const formData = new FormData()\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                    formData.append('data', JSON.stringify(newData));\r\n                                    userService.addPatients(formData).then(res => {\r\n                                       const selected = [];\r\n                                       const selectedservice = [];\r\n                                       this.setState(prevState => {\r\n                                          let data = [...prevState.data];\r\n                                          data.push(res);\r\n                                          return { ...prevState, data: [...data] };\r\n                                       });\r\n\r\n                                       this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                                    }).catch(error => {\r\n                                       console.log('erro', error);\r\n                                       alert(error.message);\r\n                                    });\r\n                                 }\r\n                                 else {\r\n                                    alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                                 }\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n                                 if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                                 if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                                 if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                                 if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                                 if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                                 if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName && newData.phone1 && newData.phone2) {\r\n                                    userService.editPatients(formData).then(res => {\r\n                                       if (oldData) {\r\n                                          this.setState(prevState => {\r\n                                             const data = [...prevState.data];\r\n                                             data[data.indexOf(oldData)] = res;\r\n                                             return { ...prevState, data };\r\n                                          });\r\n                                          const selected = [];\r\n                                          const selectedservice = [];\r\n                                          this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                                       }\r\n                                    })\r\n                                 } else {\r\n                                    alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                                 }\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}