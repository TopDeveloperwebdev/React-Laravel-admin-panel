{"version":3,"sources":["routes/Tables/Services/index.js"],"names":["Services","props","state","columns","title","field","editComponent","rowData","id","data","user","JSON","parse","localStorage","getItem","this","instance_id","console","log","userService","showServices","pagination","then","res","setState","prevState","className","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","addServices","push","catch","error","alert","onRowUpdate","oldData","editServices","indexOf","onRowDelete","deleteServices","splice","Component"],"mappings":"yOAWMA,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,QAAS,CACR,CACCC,MAAO,KAAMC,MAAO,KAAMC,cAAe,SAAAC,GAAO,OAAI,6BAClDA,EAAQC,MAGX,CAAEJ,MAAO,WAAYC,MAAO,aAG7BI,KAAM,IAZW,E,iEAkBG,IAAD,OAChBC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAC3CC,KAAKC,YAAcN,EAAKM,YACxBC,QAAQC,IAAI,MAAOH,KAAKC,aACxBG,IAAYC,aAAa,CAAEJ,YAAaD,KAAKC,YAAaK,WAAY,IAAKC,MAAK,SAAAC,GAE/E,EAAKC,UAAS,SAAAC,GACb,IAAMhB,EAAOc,EACb,OAAO,2BAAKE,GAAZ,IAAuBhB,iB,+BAOhB,IAAD,OAER,OACC,yBAAKiB,UAAU,oCACd,kBAAC,IAAD,CACCtB,MAAO,kBAAC,IAAD,CAAcI,GAAG,qBACxBmB,QAAM,IAEP,kBAAC,IAAD,CAAWC,SAAS,MACnB,kBAAC,IAAD,CAAKC,GAAI,CAAEC,GAAI,OAAQC,GAAI,GAAKL,UAAU,cACzC,kBAAC,IAAD,CACCtB,MAAO,kBAAC,IAAD,CAAcI,GAAG,qBACxBL,QAASY,KAAKb,MAAMC,QACpBM,KAAMM,KAAKb,MAAMO,KACjBuB,SAAUjB,KAAKC,YAAc,GAAI,CAChCiB,SAAU,SAAAC,GAAO,OAChB,IAAIC,SAAQ,SAAAC,GACXC,YAAW,WACVD,IACAnB,QAAQC,IAAI,UAAWgB,GACvBA,EAAQlB,YAAc,EAAKA,YAC3BG,IAAYmB,YAAYJ,GAASZ,MAAK,SAAAC,GACrCN,QAAQC,IAAI,MAAOK,GACnB,EAAKC,UAAS,SAAAC,GACb,IAAMhB,EAAI,YAAOgB,EAAUhB,MAE3B,OADAA,EAAK8B,KAAKhB,GACH,2BAAKE,GAAZ,IAAuBhB,eAEtB+B,OAAM,SAAAC,GACRC,MAAM,qEAGL,SAELC,YAAa,SAACT,EAASU,GAAV,OACZ,IAAIT,SAAQ,SAAAC,GACXC,YAAW,WACVD,IACAnB,QAAQC,IAAI,UAAWgB,EAAQ1B,IAC/BW,IAAY0B,aAAaX,GAASZ,MAAK,SAAAC,GAClCqB,GACH,EAAKpB,UAAS,SAAAC,GACb,IAAMhB,EAAI,YAAOgB,EAAUhB,MAE3B,OADAA,EAAKA,EAAKqC,QAAQF,IAAYV,EACvB,2BAAKT,GAAZ,IAAuBhB,eAGvB+B,OAAM,SAAAC,GACRC,MAAM,qEAEL,SAELK,YAAa,SAAAH,GAAO,OACnB,IAAIT,SAAQ,SAAAC,GACXC,YAAW,WACVD,IACAnB,QAAQC,IAAI,WAAY0B,EAAQpC,IAChCW,IAAY6B,eAAe,CAAExC,GAAIoC,EAAQpC,KAAMc,MAAK,SAAAC,GACnDN,QAAQC,IAAI,MAAOK,GACnB,EAAKC,UAAS,SAAAC,GACb,IAAMhB,EAAI,YAAOgB,EAAUhB,MAE3B,OADAA,EAAKwC,OAAOxC,EAAKqC,QAAQF,GAAU,GAC5B,2BAAKnB,GAAZ,IAAuBhB,iBAGvB,mB,GAnGUyC,aA6GRlD","file":"static/js/70.893ae43d.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nclass Services extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tcolumns: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'ID', field: 'id', editComponent: rowData => <div>\r\n\t\t\t\t\t\t{rowData.id}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t},\r\n\t\t\t\t{ title: 'Services', field: 'services' },\t\r\n\t\t\t],\r\n\r\n\t\t\tdata: [],\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tlet user = JSON.parse(localStorage.getItem('user'));\r\n\t\tthis.instance_id = user.instance_id;\r\n\t\tconsole.log('res', this.instance_id);\r\n\t\tuserService.showServices({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\r\n\t\t\tthis.setState(prevState => {\r\n\t\t\t\tconst data = res;\r\n\t\t\t\treturn { ...prevState, data };\r\n\t\t\t});\r\n\r\n\t\t})\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tables-wrapper search-table-wrap\">\r\n\t\t\t\t<SmallTitleBar\r\n\t\t\t\t\ttitle={<IntlMessages id=\"sidebar.services\" />}\r\n\t\t\t\t\tcenter\r\n\t\t\t\t/>\r\n\t\t\t\t<Container maxWidth=\"lg\">\r\n\t\t\t\t\t<Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n\t\t\t\t\t\t<MaterialTable\r\n\t\t\t\t\t\t\ttitle={<IntlMessages id=\"sidebar.services\" />}\r\n\t\t\t\t\t\t\tcolumns={this.state.columns}\r\n\t\t\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\t\t\teditable={this.instance_id ? {} :{\r\n\t\t\t\t\t\t\t\tonRowAdd: newData =>\r\n\t\t\t\t\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('newData', newData);\r\n\t\t\t\t\t\t\t\t\t\t\tnewData.instance_id = this.instance_id;\r\n\t\t\t\t\t\t\t\t\t\t\tuserService.addServices(newData).then(res => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('res', res);\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(prevState => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata.push(res);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t}).catch(error => {\r\n\t\t\t\t\t\t\t\t\t\t\t\talert(\"Dieser Dienst existiert bereits oder ist ein Netzwerkfehler.\");\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\r\n\t\t\t\t\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('newdata', newData.id);\r\n\t\t\t\t\t\t\t\t\t\t\tuserService.editServices(newData).then(res => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (oldData) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(prevState => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata[data.indexOf(oldData)] = newData;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}).catch(error => {\r\n\t\t\t\t\t\t\t\t\t\t\t\talert(\"Dieser Dienst existiert bereits oder ist ein Netzwerkfehler.\");\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tonRowDelete: oldData =>\r\n\t\t\t\t\t\t\t\t\tnew Promise(resolve => {\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(';oldData', oldData.id);\r\n\t\t\t\t\t\t\t\t\t\t\tuserService.deleteServices({ id: oldData.id }).then(res => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('res', res);\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState(prevState => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst data = [...prevState.data];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata.splice(data.indexOf(oldData), 1);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn { ...prevState, data };\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}, 600);\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Services;\r\n\r\n\r\n"],"sourceRoot":""}