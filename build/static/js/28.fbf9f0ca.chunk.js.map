{"version":3,"sources":["../node_modules/@material-ui/icons/Close.js","routes/Tables/PatientsTable/Components/PageTemplates.js","routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/Carefolders/Components/styles.js","routes/Tables/PatientsTable/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","PageTemplate","logo","url","split","console","log","instanceInfo","JSON","parse","localStorage","getItem","style","position","top","left","id","src","this","getUrl","instanceLogo","maxHeight","height","width","bottom","fontSize","color","fontFamily","instanceName","email","React","PreviewDialgo","props","state","open","instance","title","content","name","street","zip","city","insurance","insuranceNr","birthday","phone","pdfExportComponent","createRef","setState","setTimeout","names","document","getElementsByClassName","i","length","innerText","streets","zips","citys","insurances","insuranceNrs","birthdays","formate_date","phones","dateString","date","isTrue","Dialog","onClose","closeDialog","bind","aria-labelledby","className","DialogContent","Box","onClick","onCloseDialog","selectedDocumentList","map","element","index","key","variant","textAlign","dangerouslySetInnerHTML","__html","Component","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollst√§ndig","resourcesList","servicesList","usersList","instances","instanceNames","PatientsTable","handleChangeDate","event","target","onChangeDoctor","doctor","familyDoctor","doctorName","onChangePharmacies","pharmacy","pharmacyName","onChangeInsurance","stateInsurance","onChangeResources","Resources","resources","selected","onChangeUsers","selectedUsers","indexOf","onChangeServices","Services","services","selectedservice","columns","field","render","rowData","picture","editComponent","type","onChange","e","files","lookup","defaultValue","InputLabelProps","shrink","selectedResources","resourcesDatas","isEditResources","selectedElement","find","multiple","options","getOptionLabel","option","renderInput","params","placeholder","isEditInsurance","insuranceData","insuranceList","autoComplete","includeInputInList","margin","selectedServices","servicesDatas","currentService","isEditServices","isEditfamilyDoctor","familyDoctorData","family_doctorsList","isEditPharmacy","pharmacyData","pharmaciesList","hidden","x","instance_id","userGroup","isEditUsers","data","size","checked","serviceplan","isEditServiceplan","documentsList","folders","downloadDocs","preViewDialog","patient","relationDocs","forEach","folder","service","documents","push","Set","filter","a","firstName","lastName","streetNr","zipCode","phone1","current","openDialog","generatePdf","NotificationManager","warning","len","InstanceInfo","setItem","stringify","savePDF","ReactDOM","getElementById","pageTemplate","paperSize","right","documentsLen","pageHight","ipageHight","clientHeight","paddingBottom","user","userService","showPatients","pagination","then","res","users","ele","family_doctors","pharmacies","prevState","patients","editableComponent","onRowAdd","newData","Promise","resolve","formData","FormData","append","addPatients","catch","error","alert","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","center","maxWidth","px","xs","lg","localization","header","actions","actionRowIndex","editable","icon","tooltip","previewDocument","ref"],"mappings":"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","file":"static/js/28.fbf9f0ca.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import * as React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nexport default class PageTemplate extends React.Component {\r\n    getUrl(logo) {\r\n        let url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n        console.log('url' , url);\r\n        //  let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n       // let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpbeI4IdEQfeCLO9h67Z9SptqluMsBzJG-Ww&usqp=CAU\";\r\n       console.log('url' , url)\r\n        return url\r\n    }\r\n    render() {\r\n        let instanceInfo = JSON.parse(localStorage.getItem('instanceInfo'));\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{ position: \"absolute\", top: \"50px\", left: \"60px\" }}\r\n                    id=\"header\"\r\n                >\r\n                    <img src={this.getUrl(instanceInfo.instanceLogo) } style={{ maxHeight: \"60px\"}} height=\"auto\" width=\"100px\"/>\r\n                </div>\r\n                {/* <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", right: \"30px\", fontSize: \"12px\" }}\r\n                    id=\"footer\"\r\n                >\r\n\r\n                    Seite {this.props.pageNum} von {this.props.totalPages}\r\n                </div> */}\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", left: \"60px\", fontSize: \"12px\", color: \"#b6b6b6\" , fontFamily : 'Arial' }}\r\n                    id=\"footer\"\r\n                >\r\n                    <div style={{fontFamily : 'Arial' }}>{instanceInfo.instanceName}</div>\r\n                    Mail:  {instanceInfo.email}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { styles } from './styles.js';\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.pdfExportComponent = React.createRef();\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: '',\r\n\t\tname: '',\r\n\t\tstreet: '',\r\n\t\tzip: '',\r\n\t\tcity: '',\r\n\t\tinsurance: '',\r\n\t\tinsuranceNr: '',\r\n\t\tbirthday: '',\r\n\t\tphone: ''\r\n\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true }, () => {\r\n\t\t\tlet { name, street, zip, city, insurance, insuranceNr, birthday, phone } = this.state;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar names = document.getElementsByClassName(\"name\");\r\n\t\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"name\")[i].innerText = name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar streets = document.getElementsByClassName(\"street\");\r\n\t\t\t\tfor (let i = 0; i < streets.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"street\")[i].innerText = street;\r\n\t\t\t\t}\r\n\t\t\t\tvar zips = document.getElementsByClassName(\"zip\");\r\n\t\t\t\tfor (let i = 0; i < zips.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"zip\")[i].innerText = zip;\r\n\t\t\t\t}\r\n\t\t\t\tvar citys = document.getElementsByClassName(\"city\");\r\n\t\t\t\tfor (let i = 0; i < citys.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"city\")[i].innerText = city;\r\n\t\t\t\t}\r\n\t\t\t\tvar insurances = document.getElementsByClassName(\"insurance\");\r\n\t\t\t\tfor (let i = 0; i < insurances.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insurance\")[i].innerText = insurance;\r\n\t\t\t\t}\r\n\t\t\t\tvar insuranceNrs = document.getElementsByClassName(\"insuranceNr\");\r\n\t\t\t\tfor (let i = 0; i < insuranceNrs.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insuranceNr\")[i].innerText = insuranceNr;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar birthdays = document.getElementsByClassName(\"birthday\");\r\n\t\t\t\tfor (let i = 0; i < birthdays.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"birthday\")[i].innerText = this.formate_date(birthday);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar phones = document.getElementsByClassName(\"phone\");\r\n\t\t\t\tfor (let i = 0; i < phones.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"phone\")[i].innerText = phone;\r\n\t\t\t\t}\r\n\r\n\t\t\t}, 10);\r\n\t\t});\r\n\t};\r\n\r\n\tformate_date(dateString) {\r\n\t\tlet date = '';\r\n\t\tif (dateString) {\r\n\t\t\tlet str = dateString.split(\" \");\r\n\t\t\tdate = str[0].split('-');\r\n\t\t\tdate = date[2] + '.' + date[1] + '.' + date[0];\r\n\t\t}\r\n\r\n\t\treturn date;\r\n\t}\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\t//let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t{/* <Box textAlign=\"center\" className=\"headerBar\">\r\n\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={this.getUrl(element.instanceLogo)} />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10\" >\r\n\t\t\t\t\t\t\t\t\t\t<div variant=\"h5\" className=\"title\" textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t{/* <Box bgcolor=\"background.paper\"  >\r\n\t\t\t\t\t\t\t\t\t\t<Box className=\"footerBar\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<div textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\tSeilte 3 von 3\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<style>{styles}</style>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","export const styles = `\r\n    /* Use the DejaVu Sans font for displaying and embedding in the PDF file. The standard PDF fonts do not support Unicode characters. */\r\n     h4{\r\n        font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n        }\r\n        p,div {\r\n            font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n    \r\n        }\r\n\r\n    /* The examples load the DejaVu Sans from the KendoReact CDN. Other fonts have to be hosted from your application.\r\n    The official site of the Deja Vu Fonts project is https://dejavu-fonts.github.io/. */\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Bold.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n`;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { PDFExport, savePDF } from '@progress/kendo-react-pdf';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\nimport PageTemplate from './Components/PageTemplates';\r\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\r\n\r\n\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollst√§ndig: 'Unvollst√§ndig' };\r\n\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\nlet instances = {};\r\nlet instanceNames = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Bild', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : require(`assets/Images/patient.png`)} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Anrede', field: 'salutation', lookup: salutationList },\r\n            { title: '*Vorname', field: 'firstName' },\r\n            { title: '*Nachname', field: 'lastName' },\r\n            { title: 'Stra√üe', field: 'streetNr' },\r\n            { title: 'PLZ', field: 'zipCode' },\r\n            { title: 'Ort', field: 'city' },\r\n\r\n            {\r\n               title: 'Geburtstag', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {this.formate_date(rowData.birthday)}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: 'Telefon 1', field: 'phone1' },\r\n            { title: 'Telefon 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Bereich', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let resourcesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n\r\n                     resourcesDatas = this.state.selected.map(selectedElement => {\r\n                        console.log('resource', selectedElement);\r\n                        return resourcesList.find(element => element.resources == selectedElement);\r\n                     })\r\n                  }\r\n\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={resourcesList}\r\n                        getOptionLabel={(option) => option.resources}\r\n                        value={resourcesDatas}\r\n                        onChange={this.onChangeResources}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Bereich\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Versicherung', field: 'insurance', editComponent: rowData => {\r\n             \r\n                  if (rowData.rowData.id) {\r\n                     let insurance = rowData.rowData.insurance;\r\n                     if (this.state.isEditInsurance) {\r\n                       let insuranceData =  this.state.insuranceList.find(element => element.insurances == insurance);                      \r\n                        this.setState({isEditInsurance : false, insurance: insurance , insuranceData })\r\n                     }\r\n                  }\r\n                 \r\n                  return (<Autocomplete\r\n                     options={this.state.insuranceList}\r\n                     getOptionLabel={(option) => option.insurances}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     value={this.state.insuranceData}\r\n                     includeInputInList\r\n                     onChange={this.onChangeInsurance}\r\n                     renderInput={(params) => <TextField\r\n                        placeholder=\"Versicherung\"\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Versicherten-Nr.', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Leistungen', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              selectedServices.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        {/* <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList, props)} />\r\n                        </div> */}\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let servicesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n\r\n                     servicesDatas = this.state.selectedservice.map(selectedElement => {\r\n                        console.log('resource', selectedElement);\r\n                        return servicesList.find(element => element.services == selectedElement);\r\n                     })\r\n                  }\r\n\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={servicesList}\r\n                        getOptionLabel={(option) => option.services}\r\n                        onChange={this.onChangeServices}\r\n                        value={servicesDatas}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Leistungen\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Familiendoktor', field: 'familyDoctor', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let familyDoctor = rowData.rowData.familyDoctor;\r\n                     if (this.state.isEditfamilyDoctor) {\r\n                       let familyDoctorData =  this.state.family_doctorsList.find(element => element.doctorName == familyDoctor);                      \r\n                        this.setState({isEditfamilyDoctor : false, familyDoctor: familyDoctor , familyDoctorData })\r\n                     }\r\n                  }\r\n                 \r\n                  return (<Autocomplete\r\n                     options={this.state.family_doctorsList}\r\n                     getOptionLabel={(option) => option.doctorName}\r\n                     value={this.state.familyDoctorData}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeDoctor}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Familiendoktor\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            { title: 'Schl√ºssel-Nr.', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Etage', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Pflegegrad', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Apotheke', field: 'pharmacy', editComponent: rowData => { \r\n                  if (rowData.rowData.id) {\r\n                     let pharmacy = rowData.rowData.pharmacy;\r\n                     if (this.state.isEditPharmacy) {\r\n                       let pharmacyData = this.state.pharmaciesList.find(element => element.pharmacyName == pharmacy);                      \r\n                        this.setState({isEditPharmacy : false, pharmacy: pharmacy , pharmacyData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.pharmaciesList}\r\n                     getOptionLabel={(option) => option.pharmacyName}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangePharmacies}\r\n                     value={this.state.pharmacyData}\r\n\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Apotheke\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Instance', field: 'instance_id', hidden: false, render: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else return <div></div>;\r\n\r\n               }, editComponent: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else {\r\n                     return <div></div>;\r\n                  }\r\n               },\r\n\r\n            },\r\n            {\r\n               title: 'Nutzergruppe', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Benachrichtigungen', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData', rowData);\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         isEditInsurance : true,\r\n         isEditfamilyDoctor : true,\r\n         isEditPharmacy : true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: [],\r\n         family_doctorsList : [],\r\n         insuranceList : [],\r\n         familyDoctorData : {} ,\r\n         insuranceData : {},\r\n         pharmaciesList : [],\r\n         pharmacyData : [],\r\n\r\n\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n\r\n   }\r\n\r\n   formate_date(dateString) {\r\n      let date = '';\r\n      if (dateString) {\r\n         let str = dateString.split(\" \");\r\n         date = str[0].split('-');\r\n         date = date[2] + '.' + date[1] + '.' + date[0];\r\n      }\r\n\r\n      return date;\r\n   }\r\n   previewDocument(services, patient) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            folderDocs.map(element => {\r\n               relationDocs.push(element);\r\n            })\r\n         }\r\n      });\r\n\r\n      console.log('ssssssss1', relationDocs);\r\n      relationDocs = [...new Set(relationDocs)];\r\n      console.log('ssssssss2', relationDocs);\r\n      if (relationDocs.length) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         let name = patient.firstName + ' ' + patient.lastName;\r\n         let street = patient.streetNr;\r\n         let zip = patient.zipCode;\r\n         let city = patient.city;\r\n         let insurance = patient.insurance;\r\n         let insuranceNr = patient.insuranceNr;\r\n         let birthday = patient.birthday;\r\n         let phone = patient.phone1;\r\n         this.preViewDialog.current.setState({ name: name, street: street, zip: zip, city: city, insurance: insurance, insuranceNr: insuranceNr, birthday: birthday, phone: phone })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n\r\n         }, 2000);\r\n      }\r\n      else {\r\n         NotificationManager.warning(\"Es gibt keine Pflegeordner, die optionale Dienste anbieten.\");\r\n      }\r\n   }\r\n   generatePdf(len) {\r\n      console.log('instances', instances);\r\n      let InstanceInfo = { instanceName: instances.instanceName, instanceLogo: instances.instanceLogo, email: instances.email, name: instances.name };\r\n      localStorage.setItem('instanceInfo', JSON.stringify(InstanceInfo));\r\n      console.log('instanceInfo', InstanceInfo);\r\n      savePDF(ReactDOM.findDOMNode(document.getElementById('downloadArea')), {\r\n         pageTemplate: PageTemplate,\r\n         paperSize: [794, 1123],\r\n         margin: { top: 100, left: 50, right: 20, bottom: 70 }\r\n      });\r\n   }\r\n\r\n   formate(documentsLen, pageHight) {\r\n\r\n      let pages = [];\r\n      console.log('formate');\r\n      for (let i = 0; i < documentsLen; i++) {\r\n         let ipageHight = document.getElementById(\"page-\" + i).clientHeight;\r\n         if (ipageHight > pageHight) {\r\n            document.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n         }\r\n      }\r\n      return pages;\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event, doctor) => {\r\n      if (!doctor) doctor = {};\r\n      this.setState({ familyDoctor: doctor.doctorName });\r\n\r\n   }\r\n\r\n   onChangePharmacies = (event, pharmacy) => {\r\n      if (!pharmacy) pharmacy = {};\r\n      this.setState({ pharmacy: pharmacy.pharmacyName });\r\n   }\r\n   onChangeInsurance = (event, insurance) => {\r\n      let stateInsurance = null;\r\n      if (insurance) {\r\n         stateInsurance = insurance.insurances;\r\n      }\r\n     \r\n \r\n      \r\n      this.setState({ insurance: stateInsurance});\r\n   }\r\n   onChangeResources = (event, Resources) => {\r\n      let resources = Resources.map(element => element.resources);\r\n      this.setState({\r\n         selected: [...resources]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      let selectedUsers = [...event.target.value];\r\n      if (selectedUsers.length == usersList.length - 1 || selectedUsers.indexOf('all') > -1) selectedUsers = ['all'];\r\n      this.setState({\r\n         selectedUsers: selectedUsers\r\n      });\r\n   }\r\n   onChangeServices = (event, Services) => {\r\n      let services = Services.map(element => element.services);\r\n\r\n      this.setState({\r\n         selectedservice: [...services]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\r\n         this.setState(state => {\r\n            let columns = state.columns;\r\n            state.columns[20].hidden = (this.instance_id ? true : false);\r\n            return {\r\n               columns\r\n            };\r\n         })\r\n\r\n\r\n         servicesList = [];\r\n         servicesList = res.services\r\n\r\n         resourcesList = res.resources;\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         usersList.push(\"all\");\r\n\r\n         let family_doctorsList = res.family_doctors;\r\n\r\n\r\n         let insuranceList = res.insurances;\r\n         let pharmaciesList = res.pharmacies;\r\n\r\n         if (res.instances.length) {\r\n            instances = res.instances[0];\r\n\r\n         }\r\n         instanceNames = [];\r\n         res.instanceNames.map(ele => {\r\n\r\n            instanceNames[ele.id] = ele.instanceName;\r\n         })\r\n         console.log('resinstanceName', instanceNames)\r\n\r\n\r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders ,family_doctorsList ,insuranceList ,pharmaciesList};\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n\r\n      let editableComponent = this.instance_id ? {\r\n         onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n\r\n                  newData.instance_id = this.instance_id;\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  newData.insurance = this.state.insurance;\r\n                  newData.familyDoctor = this.state.familyDoctor;\r\n                  newData.pharmacy = this.state.pharmacy;\r\n                  newData.birthday = this.state.birthday;\r\n                  newData.serviceplan = this.state.serviceplan;\r\n                  if (this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName) {\r\n                     const formData = new FormData()\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     userService.addPatients(formData).then(res => {\r\n                        const selected = [];\r\n                        const selectedservice = [];\r\n                        this.setState(prevState => {\r\n                           let data = [...prevState.data];\r\n                           data.push(res);\r\n                           return { ...prevState, data: [...data] };\r\n                        });\r\n\r\n                        this.setState({\r\n                            selected: selected,\r\n                            selectedservice: selectedservice,\r\n                            isEditServices: true,\r\n                            isEditResources: true,\r\n                            isEditServiceplan: true, \r\n                            isEditPharmacy : true,\r\n                            isEditUsers: true,\r\n                           isEditfamilyDoctor : true,\r\n                           isEditInsurance : true,\r\n                           insurance: \"\", \r\n                           familyDoctor: \"\", \r\n                           pharmacy: '', \r\n                           birthday: '', \r\n                           selectedUsers: [] });\r\n                     }).catch(error => {\r\n                        console.log('erro', error);\r\n                        alert(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  const formData = new FormData()\r\n                  if (typeof newData.picture == 'object') {\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                  }\r\n                  console.log('dddddddddd---', this.state.selectedservice);\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                  if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                  if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                  if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                  if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                  formData.append('data', JSON.stringify(newData));\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     userService.editPatients(formData).then(res => {\r\n                        if (oldData) {\r\n                           this.setState(prevState => {\r\n                              const data = [...prevState.data];\r\n                              data[data.indexOf(oldData)] = res;\r\n                              return { ...prevState, data };\r\n                           });\r\n                           const selected = [];\r\n                           const selectedservice = [];\r\n                           this.setState({ \r\n                              selected: selected, \r\n                              selectedservice: selectedservice, \r\n                              isEditServices: true, \r\n                              isEditResources: true, \r\n                              isEditServiceplan: true, \r\n                              isEditPharmacy : true,\r\n                              isEditUsers: true,\r\n                              isEditfamilyDoctor : true,  \r\n                              isEditInsurance : true,\r\n                              insurance: \"\", \r\n                              familyDoctor: \"\", \r\n                              pharmacy: '', \r\n                              birthday: '', \r\n                              selectedUsers: [], \r\n                              serviceplan: true });\r\n                        }\r\n                     })\r\n                  } else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  console.log(';oldData', oldData.id);\r\n                  userService.deletePatients({ id: oldData.id }).then(res => {\r\n                     console.log('res', res);\r\n                     this.setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                     });\r\n                  })\r\n               }, 600);\r\n            }),\r\n      } : {\r\n            onRowUpdate: (newData, oldData) =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     const formData = new FormData()\r\n                     if (typeof newData.picture == 'object') {\r\n                        formData.append('file', newData.picture);\r\n                        newData.picture = '';\r\n                     }\r\n                     if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                     if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                     if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                     if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                     if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                     if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                     if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                     if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                        userService.editPatients(formData).then(res => {\r\n                           if (oldData) {\r\n                              this.setState(prevState => {\r\n                                 const data = [...prevState.data];\r\n                                 data[data.indexOf(oldData)] = res;\r\n                                 return { ...prevState, data };\r\n                              });\r\n                              const selected = [];\r\n                              const selectedservice = [];\r\n                              this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                           }\r\n                        })\r\n                     } else {\r\n                        alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                     }\r\n\r\n                  }, 600);\r\n               }),\r\n            onRowDelete: oldData =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     console.log(';oldData', oldData.id);\r\n                     userService.deletePatients({ id: oldData.id }).then(res => {\r\n                        console.log('res', res);\r\n                        this.setState(prevState => {\r\n                           const data = [...prevState.data];\r\n                           data.splice(data.indexOf(oldData), 1);\r\n                           return { ...prevState, data };\r\n                        });\r\n                     })\r\n                  }, 600);\r\n               }),\r\n         };\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space patient-container\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     localization={{\r\n                        header: {\r\n                           actions: 'Funktionen'\r\n                        },\r\n                     }}\r\n                     options={{\r\n                        actionRowIndex: -1\r\n                     }}\r\n                     editable={editableComponent}\r\n                     actions={this.instance_id ? [\r\n                        {\r\n                           icon: 'folder_outlined_icon',\r\n                           tooltip: 'Download Care Folder',\r\n                           onClick: (event, rowData) => {\r\n                              let currentService = JSON.parse(rowData.services);\r\n                              this.previewDocument(currentService, rowData)\r\n                           }\r\n                        }\r\n                     ] : []}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}