{"version":3,"sources":["routes/Tables/Maps/Components/Row.js","routes/Tables/Maps/Components/CustomMarker.js","routes/Tables/Maps/index.js","routes/Tables/Maps/client-config.js"],"names":["Row","props","handleClick","row","index","id","OnSelectRow","state","open","this","console","log","TableRow","TableCell","align","style","width","firstName","lastName","phone1","IconButton","aria-label","size","onClick","paddingBottom","paddingTop","height","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","gutterBottom","component","streetNr","zipCode","city","React","Component","activeIcon","icon","scaledSize","defaultIcon","CustomMarker","viewInfo","event","setState","closeInfo","selectedPatient","patient","position","key","lat","lng","padding","name","options","onMouseOver","Geocode","setLanguage","setRegion","setApiKey","enableDebug","darkstyle","Maps","onPlaceSelected","place","address","formatted_address","addressArray","address_components","getCity","area","getArea","getState","latValue","geometry","location","lngValue","markerPosition","mapPosition","current","patientAddress","length","find","element","isOpen","i","types","long_name","j","onChange","target","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","data","openData","test","patients","createRef","bind","self","user","JSON","parse","localStorage","getItem","instance_id","userService","getPatients","pagination","res","sort","compareAB","InitializePatient","a","b","Aname","Bname","bandA","toUpperCase","bandB","comparison","map","fromAddress","push","AsyncMap","withScriptjs","withGoogleMap","className","Table","TableBody","ref","defaultZoom","defaultCenter","defaultOptions","styles","paddingLeft","marginTop","marginBottom","top","componentRestrictions","country","googleMapURL","loadingElement","containerElement","mapElement"],"mappings":"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","file":"static/js/64.10cf064f.chunk.js","sourcesContent":["/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nclass Row extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n\r\n        }\r\n    }\r\n\r\n    handleClick = (row , index) => {  \r\n      \r\n        if(row.id){\r\n            this.props.OnSelectRow({id : row.id , index: index});\r\n        }\r\n        \r\n    }\r\n    componentWillMount(){\r\n\r\n    }\r\n    render() {\r\n\r\n        let { row , index , open } = this.props;\r\n        console.log('open'  , this.props.open);\r\n    \r\n        return (\r\n            <>\r\n                <TableRow >\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.firstName + ' ' + row.lastName}</TableCell>\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.phone1}</TableCell>\r\n                    <TableCell align=\"right\" style={{width : '20%'}}>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.handleClick(row , index)}>\r\n                            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {open ? <TableRow>\r\n                    <TableCell style={{ paddingBottom: 5, paddingTop: 5 , width : \"100%\" , height : 'auto'}} colSpan={6}>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.streetNr}\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.zipCode} {row.city}\r\n                                </Typography>                               \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow> : ''}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\n\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\n\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass CustomMarker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedPatient: '',\r\n            open: false\r\n        }\r\n    }\r\n    viewInfo = (event) => {\r\n        console.log('event');\r\n        this.setState({ open: !this.state.open })\r\n    };\r\n    closeInfo = (event) => {\r\n        console.log('event');\r\n        this.setState({ open: false })\r\n    };\r\n    render() {\r\n        let { patient, position, key } = this.props;\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.open == true && <InfoWindow\r\n\r\n                        position={{ lat: (patient.lat), lng: patient.lng }}\r\n                    >\r\n                        <div>\r\n                            <span style={{ padding: 0, margin: 0 }}>{patient.name} {patient.streetNr} {patient.zipCode} {patient.city}</span>\r\n                        </div>\r\n                    </InfoWindow>\r\n                }\r\n                {\r\n                    patient.id ? <Marker\r\n                        options={patient.id == this.state.selectedPatient ? activeIcon : defaultIcon}\r\n                        key={key}\r\n                        name={'Dolores park'}\r\n                        position={position}\r\n                        onMouseOver={this.viewInfo}\r\n                    /> : <Marker\r\n                            key={key}\r\n                            name={'Dolores park'}\r\n                            position={position}\r\n                            onMouseOver={this.viewInfo}\r\n\r\n                        />\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default CustomMarker;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\n\r\nimport { CustomCard } from 'components/GlobalComponents';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\n\r\nimport Row from './Components/Row';\r\nimport CustomMarker from './Components/CustomMarker';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\n\r\nimport { GoogleMapsAPI } from './client-config';\r\n\r\n\r\nGeocode.setLanguage(\"de\");\r\nGeocode.setRegion(\"de\");\r\nGeocode.setApiKey(GoogleMapsAPI);\r\nGeocode.enableDebug();\r\nlet darkstyle = [\r\n\r\n\t{\r\n\t\t\"featureType\": \"poi.medical\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.school\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.sports_complex\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"road.arterial\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.airport\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.rail\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass Maps extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t\tdata: [],\r\n\t\t\topenData: {},\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\ttest: '',\r\n\t\t\tstate: '',\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\r\n\t\t\tpatients: [],\r\n\t\t\tpatientAddress: [],\r\n\t\t\tselectedPatient: '',\r\n\t\t\tisOpen: []\r\n\r\n\t\t};\r\n\t\tthis.CustomMarker = React.createRef();\r\n\t\tthis.Row = React.createRef();\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet self\r\n\t\t\t= this;\r\n\t\tlet user = JSON.parse(localStorage.getItem('user'));\r\n\t\tthis.instance_id = user.instance_id;\r\n\t\tconsole.log('res', this.instance_id);\r\n\t\tuserService.getPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\t\t\tlet data = res;\r\n\t\t\tdata = data.sort(self.compareAB);\r\n\t\t     console.log('res' , data);\r\n\t\t\tthis.setState({ data });\r\n\t\t\t\r\n\t\t\tthis.InitializePatient(data);\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = (place) => {\r\n\t\tconsole.log('plc', place);\r\n\t\tconst address = place.formatted_address,\r\n\t\t\taddressArray = place.address_components,\r\n\t\t\tcity = this.getCity(addressArray),\r\n\t\t\tarea = this.getArea(addressArray),\r\n\t\t\tstate = this.getState(addressArray),\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.setState({\r\n\t\t\taddress: (address) ? address : '',\r\n\t\t\tarea: (area) ? area : '',\r\n\t\t\tcity: (city) ? city : '',\r\n\t\t\tstate: (state) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\r\n\t\t})\r\n\t};\r\n\r\n\thandleClick = (props) => {\r\n\r\n\t\tthis.CustomMarker.current.setState({ selectedPatient: props.id });\r\n\t\tif (this.state.patientAddress.length) {\r\n\t\t\tlet mapPosition = this.state.patientAddress.find(element => element.id == props.id);\r\n\t\t\tlet isOpen = [...this.state.isOpen];\r\n\t\t\tisOpen[props.index] = !isOpen[props.index];\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedPatient: props.id,\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: mapPosition.lat,\r\n\t\t\t\t\tlng: mapPosition.lng\r\n\t\t\t\t},\r\n\t\t\t\tisOpen\r\n\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tgetCity = (addressArray) => {\r\n\t\tlet city = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n\t\t\t\tcity = addressArray[i].long_name;\r\n\t\t\t\treturn city;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the area and set the area input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetArea = (addressArray) => {\r\n\t\tlet area = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0]) {\r\n\t\t\t\tfor (let j = 0; j < addressArray[i].types.length; j++) {\r\n\t\t\t\t\tif ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n\t\t\t\t\t\tarea = addressArray[i].long_name;\r\n\t\t\t\t\t\treturn area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the address and set the address input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetState = (addressArray) => {\r\n\t\tlet state = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n\t\t\t\t\tstate = addressArray[i].long_name;\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * And function for city,state and address input\r\n\t * @param event\r\n\t */\r\n\tonChange = (event) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t};\r\n\t/**\r\n\t * This Event triggers when the marker window is closed\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonInfoWindowClose = (event) => {\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\r\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n\t * And then set those values in the state.\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonMarkerDragEnd = (event) => {\r\n\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t\tnewLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng(newLat, newLng).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t\taddressArray = response.results[0].address_components,\r\n\t\t\t\t\tcity = addressArray.length ? this.getCity(addressArray) : '',\r\n\t\t\t\t\tarea = addressArray.length ? this.getArea(addressArray) : '',\r\n\t\t\t\t\tstate = addressArray.length ? this.getState(addressArray) : '';\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\taddress: (address) ? address : '',\r\n\t\t\t\t\tarea: (area) ? area : '',\r\n\t\t\t\t\tcity: (city) ? city : '',\r\n\t\t\t\t\tstate: (state) ? state : '',\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tcompareAB(a, b) {\r\n\t\tlet Aname = a.firstName + ' ' + a.lastName;\r\n\t\tlet Bname = b.firstName + ' ' + b.lastName;\r\n\t\tconst bandA = Aname.toUpperCase();\r\n\t\tconst bandB = Bname.toUpperCase();\r\n\r\n\t\tlet comparison = 0;\r\n\t\tif (bandA > bandB) {\r\n\t\t\tcomparison = 1;\r\n\t\t} else if (bandA < bandB) {\r\n\t\t\tcomparison = -1;\r\n\t\t}\r\n\t\treturn comparison;\r\n\t}\r\n\r\n\tasync InitializePatient(patients) {\r\n\t\tlet self = this;\r\n\t\tlet patientAddress = [];\r\n\t\tlet isOpen = [];\r\n\r\n\t\tpatients.map(async function (patient, index) {\r\n\t\t\tif (patient.streetNr) {\r\n\t\t\t\tlet response = await Geocode.fromAddress(patient.streetNr + ', ' + patient.zipCode + \" \" + patient.city);\r\n\r\n\t\t\t\tconst { lat, lng } = response.results[0].geometry.location;\r\n\t\t\t\tif (lat && lng) {\r\n\r\n\t\t\t\t\tpatientAddress.push({ id: patient.id, lat: lat, lng: lng, name: patient.firstName + ' ' + patient.lastName, streetNr: patient.streetNr, zipCode: patient.zipCode, city: patient.city });\r\n\t\t\t\t\tisOpen.push(false);\r\n\r\n\t\t\t\t\tif (patients.length - 2 < index) {\r\n\t\t\t\t\t\tself.setState({ patientAddress: patientAddress, isOpen });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst { data, selectedPatient, patientAddress, isOpen } = this.state;\r\n\r\n\t\tconsole.log('this.state isOpen', isOpen);\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t{/* <div className=\"mapContainer\"> */}\r\n\t\t\t\t\t\t<div className=\"patientsContainer\">\r\n\t\t\t\t\t\t\t<CustomCard>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Table aria-label=\"collapsible table \">\r\n\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.data.length > 0 && this.state.data.map((element, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row ref={this.Row} key={index} open={isOpen[index]} row={element} index={index} OnSelectRow={this.handleClick} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</CustomCard>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<GoogleMap\r\n\r\n\t\t\t\t\t\t\tdefaultZoom={11}\r\n\t\t\t\t\t\t\tdefaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t\t\tdefaultOptions={{\r\n\t\t\t\t\t\t\t\tstyles: darkstyle\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{patientAddress.length > 0 && patientAddress.map((patient, index) => (\r\n\t\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} key={index} patient={patient} name={'Dolores park'} position={{ lat: patient.lat, lng: patient.lng }} />\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} patient={{ id: 0, lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng, streetNr: this.state.address }} position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }} />\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\t\tmarginTop: '10px',\r\n\t\t\t\t\t\t\t\t\tmarginBottom: '10px',\r\n\t\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\t\ttop: '13vh'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonPlaceSelected={this.onPlaceSelected}\r\n\t\t\t\t\t\t\t\ttypes={[\"address\"]}\r\n\t\t\t\t\t\t\t\tcomponentRestrictions={{ country: \"de\" }}\r\n\r\n\t\t\t\t\t\t\t/>\r\n\r\n\r\n\t\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t\t</>\r\n\r\n\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tables-wrapper search-table-wrap\">\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: '90vh', position: \"relative\", }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default Maps;\r\n\r\n\r\n","export const GoogleMapsAPI = 'AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8';\n"],"sourceRoot":""}