{"version":3,"sources":["routes/Tables/Maps/Components/Row.js","routes/Tables/Maps/Components/CustomMarker.js","routes/Tables/Maps/index.js","routes/Tables/Maps/client-config.js"],"names":["Row","props","handleClick","event","row","index","console","log","id","OnSelectRow","state","open","this","TableRow","onClick","e","TableCell","align","style","width","firstName","lastName","phone1","IconButton","aria-label","size","paddingBottom","paddingTop","height","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","gutterBottom","component","streetNr","zipCode","city","React","Component","activeIcon","icon","scaledSize","defaultIcon","CustomMarker","viewInfo","setState","closeInfo","selectedPatient","patient","position","key","lat","lng","padding","name","options","Geocode","setLanguage","setRegion","setApiKey","enableDebug","darkstyle","Maps","onPlaceSelected","place","address","formatted_address","addressArray","address_components","getCity","area","getArea","getState","latValue","geometry","location","lngValue","markerPosition","mapPosition","patientAddress","length","find","element","isOpen","i","types","long_name","j","onChange","target","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","data","openData","test","patients","createRef","bind","self","user","JSON","parse","localStorage","getItem","instance_id","userService","getPatients","pagination","res","sort","compareAB","InitializePatient","a","b","Aname","Bname","bandA","toUpperCase","bandB","comparison","map","fromAddress","push","AsyncMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","defaultOptions","styles","ref","paddingLeft","marginTop","marginBottom","top","zIndex","componentRestrictions","country","className","Table","TableBody","googleMapURL","loadingElement","containerElement","mapElement"],"mappings":"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","file":"static/js/66.f060de12.chunk.js","sourcesContent":["/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nclass Row extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n\r\n        }\r\n    }\r\n\r\n    handleClick = (event , row , index) => {  \r\n        console.log('event' , event)\r\n        if(row.id){\r\n            this.props.OnSelectRow({id : row.id , index: index});\r\n        }\r\n        \r\n    }\r\n    componentWillMount(){\r\n\r\n    }\r\n    render() {\r\n\r\n        let { row , index , open } = this.props;\r\n        console.log('open'  , this.props.open);\r\n    \r\n        return (\r\n            <>\r\n                <TableRow onClick={(e) => this.handleClick(e,row , index)}>\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.firstName + ' ' + row.lastName}</TableCell>\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.phone1}</TableCell>\r\n                    <TableCell align=\"right\" style={{width : '20%'}}>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" >\r\n                            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {open ? <TableRow>\r\n                    <TableCell style={{ paddingBottom: 5, paddingTop: 5 , width : \"100%\" , height : 'auto'}} colSpan={6}>\r\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.streetNr}\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.zipCode} {row.city}\r\n                                </Typography>                               \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow> : ''}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\n\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\n\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass CustomMarker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedPatient: '',\r\n            open: false\r\n        }\r\n    }\r\n    viewInfo = (event) => {\r\n\r\n        this.setState({ open: !this.state.open })\r\n    };\r\n    closeInfo = (event) => {\r\n        \r\n        this.setState({ open: false })\r\n       \r\n    };\r\n    render() {\r\n        let { patient, position, key } = this.props;\r\n        console.log('props ', this.state);\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    (this.state.open == true || this.props.open) && <InfoWindow\r\n\r\n                        position={{ lat: (patient.lat), lng: patient.lng }}\r\n                    >\r\n                        <div>\r\n                            <span style={{ padding: 0, margin: 0 }}>{patient.name} {patient.streetNr} {patient.zipCode} {patient.city}</span>\r\n                        </div>\r\n                    </InfoWindow>\r\n                }\r\n                {\r\n                    patient.id ? <Marker\r\n                        options={this.props.open ? activeIcon : defaultIcon}\r\n                        key={key}\r\n                        name={'Dolores park'}\r\n                        position={position}\r\n                        onClick={this.viewInfo}\r\n                    /> : <Marker\r\n                            key={key}\r\n                            name={'Dolores park'}\r\n                            position={position}\r\n                            onClick={this.viewInfo}\r\n\r\n                        />\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default CustomMarker;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\n\r\nimport { CustomCard } from 'components/GlobalComponents';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\n\r\nimport Row from './Components/Row';\r\nimport CustomMarker from './Components/CustomMarker';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\n\r\nimport { GoogleMapsAPI } from './client-config';\r\n\r\n\r\nGeocode.setLanguage(\"de\");\r\nGeocode.setRegion(\"de\");\r\nGeocode.setApiKey(GoogleMapsAPI);\r\nGeocode.enableDebug();\r\nlet darkstyle = [\r\n\r\n\t{\r\n\t\t\"featureType\": \"poi.medical\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.school\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.sports_complex\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"road.arterial\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.airport\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.rail\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass Maps extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t\tdata: [],\r\n\t\t\topenData: {},\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\ttest: '',\r\n\t\t\tstate: '',\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\r\n\t\t\tpatients: [],\r\n\t\t\tpatientAddress: [],\r\n\t\t\tselectedPatient: '',\r\n\t\t\tisOpen: {}\r\n\r\n\t\t};\r\n\t\tthis.CustomMarker = React.createRef();\r\n\t\tthis.Row = React.createRef();\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet self\r\n\t\t\t= this;\r\n\t\tlet user = JSON.parse(localStorage.getItem('user'));\r\n\t\tthis.instance_id = user.instance_id;\r\n\t\tconsole.log('res', this.instance_id);\r\n\t\tuserService.getPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\t\t\tlet data = res;\r\n\t\t\tdata = data.sort(self.compareAB);\r\n\t\t\tconsole.log('res', data);\r\n\t\t\tthis.setState({ data });\r\n\r\n\t\t\tthis.InitializePatient(data);\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = (place) => {\r\n\t\t\r\n\t\tconst address = place.formatted_address,\r\n\t\t\taddressArray = place.address_components,\r\n\t\t\tcity = this.getCity(addressArray),\r\n\t\t\tarea = this.getArea(addressArray),\r\n\t\t\tstate = this.getState(addressArray),\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.setState({\r\n\t\t\taddress: (address) ? address : '',\r\n\t\t\tarea: (area) ? area : '',\r\n\t\t\tcity: (city) ? city : '',\r\n\t\t\tstate: (state) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t})\r\n\t};\r\n\r\n\thandleClick = (props) => {\r\n\t\tif (this.state.patientAddress.length) {\r\n\t\t\tlet mapPosition = this.state.patientAddress.find(element => element.id == props.id);\r\n\t\t\tlet isOpen = {...this.state.isOpen};\r\n\t\t\tisOpen[props.id] = !isOpen[props.id];\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedPatient: props.id,\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: mapPosition.lat,\r\n\t\t\t\t\tlng: mapPosition.lng\r\n\t\t\t\t},\r\n\t\t\t\tisOpen\r\n\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\r\n\tgetCity = (addressArray) => {\r\n\t\tlet city = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n\t\t\t\tcity = addressArray[i].long_name;\r\n\t\t\t\treturn city;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the area and set the area input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetArea = (addressArray) => {\r\n\t\tlet area = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0]) {\r\n\t\t\t\tfor (let j = 0; j < addressArray[i].types.length; j++) {\r\n\t\t\t\t\tif ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n\t\t\t\t\t\tarea = addressArray[i].long_name;\r\n\t\t\t\t\t\treturn area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the address and set the address input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetState = (addressArray) => {\r\n\t\tlet state = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n\t\t\t\t\tstate = addressArray[i].long_name;\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * And function for city,state and address input\r\n\t * @param event\r\n\t */\r\n\tonChange = (event) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t};\r\n\t/**\r\n\t * This Event triggers when the marker window is closed\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonInfoWindowClose = (event) => {\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\r\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n\t * And then set those values in the state.\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonMarkerDragEnd = (event) => {\r\n\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t\tnewLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng(newLat, newLng).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t\taddressArray = response.results[0].address_components,\r\n\t\t\t\t\tcity = addressArray.length ? this.getCity(addressArray) : '',\r\n\t\t\t\t\tarea = addressArray.length ? this.getArea(addressArray) : '',\r\n\t\t\t\t\tstate = addressArray.length ? this.getState(addressArray) : '';\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\taddress: (address) ? address : '',\r\n\t\t\t\t\tarea: (area) ? area : '',\r\n\t\t\t\t\tcity: (city) ? city : '',\r\n\t\t\t\t\tstate: (state) ? state : '',\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\tcompareAB(a, b) {\r\n\t\tlet Aname = a.firstName + ' ' + a.lastName;\r\n\t\tlet Bname = b.firstName + ' ' + b.lastName;\r\n\t\tconst bandA = Aname.toUpperCase();\r\n\t\tconst bandB = Bname.toUpperCase();\r\n\r\n\t\tlet comparison = 0;\r\n\t\tif (bandA > bandB) {\r\n\t\t\tcomparison = 1;\r\n\t\t} else if (bandA < bandB) {\r\n\t\t\tcomparison = -1;\r\n\t\t}\r\n\t\treturn comparison;\r\n\t}\r\n\r\n\tasync InitializePatient(patients) {\r\n\t\tlet self = this;\r\n\t\tlet patientAddress = [];\r\n\t\tlet isOpen = {};\r\n\r\n\t\tpatients.map(async function (patient, index) {\r\n\t\t\tif (patient.streetNr) {\r\n\t\t\t\tlet response = await Geocode.fromAddress(patient.streetNr + ', ' + patient.zipCode + \" \" + patient.city);\r\n\r\n\t\t\t\tconst { lat, lng } = response.results[0].geometry.location;\r\n\t\t\t\tif (lat && lng) {\r\n\t\t\t\t\tpatientAddress.push({ id: patient.id, lat: lat, lng: lng, name: patient.firstName + ' ' + patient.lastName, streetNr: patient.streetNr, zipCode: patient.zipCode, city: patient.city });\r\n\t\t\t\t\t//isOpen.push(false);\r\n\t\t\t\t\tisOpen[patient.id] = false;\r\n\t\t\t\t\tif (patients.length - 2 < index) {\r\n\t\t\t\t\t\tconsole.log('isopen' , isOpen);\r\n\t\t\t\t\t\tself.setState({ patientAddress: patientAddress, isOpen });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tlet { data, selectedPatient, patientAddress, isOpen } = this.state;\t\r\n\t\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t{/* <div className=\"mapContainer\"> */}\r\n\r\n\r\n\t\t\t\t\t\t<GoogleMap\r\n\r\n\t\t\t\t\t\t\tdefaultZoom={11}\r\n\t\t\t\t\t\t\tdefaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t\t\tdefaultOptions={{\r\n\t\t\t\t\t\t\t\tstyles: darkstyle\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{patientAddress.length > 0 && patientAddress.map((patient, index) => (\r\n\t\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} key={index} open={isOpen[patient.id]} patient={patient} name={'Dolores park'} position={{ lat: patient.lat, lng: patient.lng }} />\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} patient ={{ id: 0, lat: this.state.markerPosition.lat,lng: this.state.markerPosition.lng,  name: '', streetNr: this.state.address , zipCode: this.state.state, city: this.state.city}} patient={{ id: 0, lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng, streetNr: this.state.address }} position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }} />\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\t\tmarginTop: '10px',\r\n\t\t\t\t\t\t\t\t\tmarginBottom: '10px',\r\n\t\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\t\ttop: '13vh',\r\n\t\t\t\t\t\t\t\t\tzIndex : 500\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonPlaceSelected={this.onPlaceSelected}\r\n\t\t\t\t\t\t\t\ttypes={[\"address\"]}\r\n\t\t\t\t\t\t\t\tcomponentRestrictions={{ country: \"de\" }}\r\n\r\n\t\t\t\t\t\t\t/>\r\n\r\n\r\n\t\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t\t</>\r\n\r\n\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tables-wrapper search-table-wrap\">\r\n\t\t\t\t<div className=\"patientsContainer\">\r\n\t\t\t\t\t<CustomCard>\r\n\r\n\t\t\t\t\t\t<div className=\"content\">\r\n\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Table aria-label=\"collapsible table \">\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.data.length > 0 && this.state.data.map((element, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Row ref={this.Row} key={index} open={isOpen[element.id]} row={element} index={index} OnSelectRow={this.handleClick} />\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</CustomCard>\r\n\t\t\t\t</div>\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: '90vh', position: \"relative\", }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default Maps;\r\n\r\n\r\n","export const GoogleMapsAPI = 'AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8';\n"],"sourceRoot":""}