{"version":3,"sources":["routes/Tables/Maps/Map.js","routes/Tables/Maps/client-config.js","routes/Tables/Maps/Components/Row.js","routes/Tables/Maps/index.js"],"names":["Geocode","setLanguage","setRegion","setApiKey","enableDebug","darkstyle","activeIcon","icon","scaledSize","defaultIcon","MapPage","props","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","city","area","state","markerPosition","mapPosition","error","console","test","center","patientAddress","selectedPatient","InitializePatient","bind","this","patients","self","map","patient","index","a","streetNr","fromAddress","geometry","location","push","id","log","AsyncMap","withScriptjs","withGoogleMap","defaultZoom","zoom","defaultCenter","defaultOptions","styles","options","key","draggable","onDragEnd","position","googleMapURL","loadingElement","style","height","containerElement","mapElement","React","Component","Row","handleClick","row","open","OnRowclick","TableRow","TableCell","align","firstName","lastName","phone1","IconButton","aria-label","size","onClick","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","gutterBottom","component","zipCode","Maps","onPlaceSelected","place","mapPage","current","latValue","lngValue","data","openData","createRef","user","JSON","parse","localStorage","getItem","instance_id","userService","getPatients","pagination","res","className","width","paddingLeft","marginTop","marginBottom","componentRestrictions","country","Table","TableBody","element","ref","Map"],"mappings":"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","file":"static/js/65.acd573fd.chunk.js","sourcesContent":["import React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\n\n\nimport { GoogleMapsAPI } from './client-config';\n\n\nGeocode.setLanguage(\"de\");\nGeocode.setRegion(\"de\");\nGeocode.setApiKey(GoogleMapsAPI);\nGeocode.enableDebug();\nlet darkstyle = [\n\n\t{\n\t\t\"featureType\": \"poi.medical\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"featureType\": \"poi.school\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"featureType\": \"poi.sports_complex\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"featureType\": \"road.arterial\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"featureType\": \"transit.station.airport\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"featureType\": \"transit.station.rail\",\n\t\t\"stylers\": [\n\t\t\t{\n\t\t\t\t\"visibility\": \"off\"\n\t\t\t}\n\t\t]\n\t}\n]\nlet activeIcon = {icon:`http://maps.google.com/mapfiles/ms/icons/pink-dot.png` , scaledSize: 100};\nlet defaultIcon = {icon:`http://maps.google.com/mapfiles/ms/icons/blue-dot.png` , scaledSize: 100};\n\nclass MapPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\taddress: '',\n\t\t\tcity: '',\n\t\t\tarea: '',\n\t\t\ttest: '',\n\t\t\t// state: '',\n\t\t\tmapPosition: {\n\t\t\t\tlat: this.props.center.lat,\n\t\t\t\tlng: this.props.center.lng\n\t\t\t},\n\t\t\tmarkerPosition: {\n\t\t\t\tlat: this.props.center.lat,\n\t\t\t\tlng: this.props.center.lng\n\t\t\t},\n\t\t\tpatientAddress: [],\n\t\t\tselectedPatient : '',\n\t\t}\n\t\tthis.InitializePatient = this.InitializePatient.bind(this)\n\t\n\n\t}\n\t/**\n\t * Get the current address from the default map position and set those values in the state\n\t */\n\tcomponentDidMount() {\n\t\tthis.InitializePatient(this.props.patients)\n\t};\n\t// handleChangePatient(address) {\n\t//    this.setState({selectedPatient : address});\n\t// }\n\tasync InitializePatient(patients) {\n\t\tlet self = this;\n\t\tlet patientAddress = [];\n\t\tpatients.map(async function (patient, index) {\n\t\t\tif (patient.streetNr) {\n\t\t\t\tlet response = await Geocode.fromAddress(patient.streetNr);\n\n\t\t\t\tconst { lat, lng } = response.results[0].geometry.location;\n\t\t\t\tif (lat && lng) {\n\n\t\t\t\t\tpatientAddress.push({id : patient.id , lat: lat, lng: lng });\n\t\t\t\t\tif (patients.length - 2 < index) {\n\t\t\t\t\t\tself.setState({ patientAddress: patientAddress });\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t})\n\n\n\t}\n\t/**\n\t * Get the city and set the city input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n\tgetCity = (addressArray) => {\n\t\tlet city = '';\n\t\tfor (let i = 0; i < addressArray.length; i++) {\n\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n\t\t\t\tcity = addressArray[i].long_name;\n\t\t\t\treturn city;\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Get the area and set the area input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n\tgetArea = (addressArray) => {\n\t\tlet area = '';\n\t\tfor (let i = 0; i < addressArray.length; i++) {\n\t\t\tif (addressArray[i].types[0]) {\n\t\t\t\tfor (let j = 0; j < addressArray[i].types.length; j++) {\n\t\t\t\t\tif ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n\t\t\t\t\t\tarea = addressArray[i].long_name;\n\t\t\t\t\t\treturn area;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Get the address and set the address input value to the one selected\n\t *\n\t * @param addressArray\n\t * @return {string}\n\t */\n\tgetState = (addressArray) => {\n\t\tlet state = '';\n\t\tfor (let i = 0; i < addressArray.length; i++) {\n\t\t\tfor (let i = 0; i < addressArray.length; i++) {\n\t\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n\t\t\t\t\tstate = addressArray[i].long_name;\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * And function for city,state and address input\n\t * @param event\n\t */\n\tonChange = (event) => {\n\t\tthis.setState({ [event.target.name]: event.target.value });\n\t};\n\t/**\n\t * This Event triggers when the marker window is closed\n\t *\n\t * @param event\n\t */\n\tonInfoWindowClose = (event) => {\n\n\t};\n\n\t/**\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\n\t * And then set those values in the state.\n\t *\n\t * @param event\n\t */\n\tonMarkerDragEnd = (event) => {\n\n\t\tlet newLat = event.latLng.lat(),\n\t\t\tnewLng = event.latLng.lng();\n\n\t\tGeocode.fromLatLng(newLat, newLng).then(\n\t\t\tresponse => {\n\t\t\t\tconst address = response.results[0].formatted_address,\n\t\t\t\t\taddressArray = response.results[0].address_components,\n\t\t\t\t\tcity = addressArray.length ? this.getCity(addressArray) : '',\n\t\t\t\t\tarea = addressArray.length ? this.getArea(addressArray) : '',\n\t\t\t\t\tstate = addressArray.length ? this.getState(addressArray) : '';\n\t\t\t\tthis.setState({\n\t\t\t\t\taddress: (address) ? address : '',\n\t\t\t\t\tarea: (area) ? area : '',\n\t\t\t\t\tcity: (city) ? city : '',\n\t\t\t\t\tstate: (state) ? state : '',\n\t\t\t\t\tmarkerPosition: {\n\t\t\t\t\t\tlat: newLat,\n\t\t\t\t\t\tlng: newLng\n\t\t\t\t\t},\n\t\t\t\t\tmapPosition: {\n\t\t\t\t\t\tlat: newLat,\n\t\t\t\t\t\tlng: newLng\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t);\n\n\t};\n\n\n\n\n\trender() {\n\t\tlet { patientAddress } = this.state;\n        console.log('props' , this.props.selectedPatient);\n\t\tconst AsyncMap = withScriptjs(\n\t\t\twithGoogleMap(\n\t\t\t\tprops => (\n\t\t\t\t\t<GoogleMap\n\n\t\t\t\t\t\tdefaultZoom={this.props.zoom}\n\t\t\t\t\t\tdefaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n\t\t\t\t\t\tdefaultOptions={{\n\t\t\t\t\t\t\tstyles: darkstyle\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{patientAddress.length > 0 && patientAddress.map((patient, index) => {\n\t\t\t\t\t\t\tconsole.log('patient.streetNr == this.props.selectedPatient ',this.props.selectedPatient  );\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Marker\n\t\t\t\t\t\t\t\t   options={patient.id == this.props.selectedPatient ? activeIcon : defaultIcon}\t\t\t\t\t\t\t\t\t   \t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tname={'Dolores park'}\n\t\t\t\t\t\t\t\t\tdraggable={true}\n\t\t\t\t\t\t\t\t\tonDragEnd={this.onMarkerDragEnd}\n\t\t\t\t\t\t\t\t\tposition={{lat: patient.lat, lng: patient.lng}}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t</GoogleMap>\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\treturn (<div>\n\n\t\t\t<AsyncMap\n\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8&libraries=places`}\n\t\t\t\tloadingElement={\n\t\t\t\t\t<div style={{ height: `100%` }} />\n\t\t\t\t}\n\t\t\t\tcontainerElement={\n\t\t\t\t\t<div style={{ height: this.props.height }} />\n\t\t\t\t}\n\t\t\t\tmapElement={\n\t\t\t\t\t<div style={{ height: `100%` }} />\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>)\n\t}\n}\nexport default MapPage\n","export const GoogleMapsAPI = 'AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8';\n","/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nclass Row extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n\r\n        }\r\n    }\r\n\r\n    handleClick = (row) => {  \r\n        let open = !this.state.open;\r\n   \r\n        this.setState({ open });\r\n       \r\n        if(row.streetNr){\r\n            this.props.OnRowclick(row.id);\r\n        }\r\n        \r\n    }\r\n    render() {\r\n\r\n        let { row } = this.props;\r\n        return (\r\n            <>\r\n                <TableRow >\r\n                    <TableCell align=\"left\">{row.firstName + ' ' + row.lastName}</TableCell>\r\n                    <TableCell align=\"left\">{row.phone1}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.handleClick(row)}>\r\n                            {this.state.open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {this.state.open ? <TableRow>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.streetNr}\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.zipCode}\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.city}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow> : ''}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\nimport MapPage from './Map';\r\nimport { CustomCard } from 'components/GlobalComponents';\r\nimport Autocomplete from 'react-google-autocomplete';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\n\r\nimport Row from './Components/Row';\r\n\r\n// function Row(props) {\r\n// \tconst { row } = props;\r\n// \tconst [open, setOpen] = React.useState(false);\r\n\r\n\r\n// \treturn (\r\n// \t\t<React.Fragment>\r\n// \t\t\t<TableRow >\r\n// \t\t\t\t<TableCell align=\"left\">{row.firstName + ' ' + row.lastName}</TableCell>\r\n// \t\t\t\t<TableCell align=\"left\">{row.phone1}</TableCell>\r\n// \t\t\t\t<TableCell align=\"right\">\r\n// \t\t\t\t\t<IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n// \t\t\t\t\t\t{open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n// \t\t\t\t\t</IconButton>\r\n// \t\t\t\t</TableCell>\r\n// \t\t\t</TableRow>\r\n// \t\t\t{open ? <TableRow>\r\n// \t\t\t\t<TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n// \t\t\t\t\t<Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n// \t\t\t\t\t\t<Box margin={1}>\r\n// \t\t\t\t\t\t\t<Typography gutterBottom component=\"div\">\r\n// \t\t\t\t\t\t\t{row.streetNr}\r\n// \t\t\t\t\t\t\t</Typography>\r\n// \t\t\t\t\t\t\t<Typography gutterBottom component=\"div\">\r\n// \t\t\t\t\t\t\t{row.zipCode}\r\n// \t\t\t\t\t\t\t</Typography>\r\n// \t\t\t\t\t\t\t<Typography gutterBottom component=\"div\">\r\n// \t\t\t\t\t\t\t{row.city}\r\n// \t\t\t\t\t\t\t</Typography>\t\t\t\t\t\t\r\n// \t\t\t\t\t\t</Box>\r\n// \t\t\t\t\t</Collapse>\r\n// \t\t\t\t</TableCell>\r\n// \t\t\t</TableRow> : ''}\r\n\r\n// \t\t</React.Fragment>\r\n// \t);\r\n// }\r\n\r\nclass Maps extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t\tdata: [],\r\n\t\t\topenData: {},\r\n\t\t\tpatients: [],\r\n\t\t\tselectedPatient : ''\r\n\r\n\r\n\t\t};\r\n\t\tthis.mapPage = React.createRef();\r\n\t\tthis.Row = React.createRef();\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet user = JSON.parse(localStorage.getItem('user'));\r\n\t\tthis.instance_id = user.instance_id;\r\n\t\tconsole.log('res', this.instance_id);\r\n\t\tuserService.getPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\t\t\tconst data = res;\r\n\t\t\tthis.setState({ data });\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = (place) => {\r\n\t\tconsole.log('plc', place);\r\n\t\tconst address = place.formatted_address,\r\n\t\t\taddressArray = place.address_components,\r\n\t\t\tcity = this.mapPage.current.getCity(addressArray),\r\n\t\t\tarea = this.mapPage.current.getArea(addressArray),\r\n\t\t\tstate = this.mapPage.current.getState(addressArray),\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.mapPage.current.setState({\r\n\t\t\taddress: (address) ? address : '',\r\n\t\t\tarea: (area) ? area : '',\r\n\t\t\tcity: (city) ? city : '',\r\n\t\t\tstate: (state) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t})\r\n\t};\r\n\r\n\thandleClick = (id) => {\r\n\t\tthis.setState({selectedPatient : id});\t\r\n\t}\r\n\trender() {\r\n\t\tconst { data ,selectedPatient } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"mapContainer\">\r\n\t\t\t\t<div className=\"patientsContainer\">\r\n\t\t\t\t\t<CustomCard>\r\n\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\tmarginTop: '2px',\r\n\t\t\t\t\t\t\t\tmarginBottom: '10px'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonPlaceSelected={this.onPlaceSelected}\r\n\t\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\t\tcomponentRestrictions={{ country: \"de\" }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t\t<h6>Patient</h6>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Table aria-label=\"collapsible table\">\r\n\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.data.length > 0 && this.state.data.map((element, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Row ref={this.Row} key={index} row={element} OnRowclick={this.handleClick} />\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</CustomCard>\r\n\t\t\t\t</div>\r\n\t\t\t\t{data && data.length > 0 &&\r\n\t\t\t\t\t<MapPage\r\n\t\t\t\t\t\tcenter={{ lat: 51.2235516, lng: 6.6673354}}\r\n\t\t\t\t\t\theight='90vh'\r\n\t\t\t\t\t\tzoom={12}\r\n\t\t\t\t\t\tref={this.mapPage}\r\n\t\t\t\t\t\tpatients={data}\r\n\t\t\t\t\t\tselectedPatient={selectedPatient}\r\n\t\t\t\t\t/>}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Maps;\r\n\r\n\r\n"],"sourceRoot":""}