{"version":3,"sources":["routes/Tables/Maps/Components/Row.js","routes/Tables/Maps/Components/CustomMarker.js","routes/Tables/Maps/index.js","routes/Tables/Maps/client-config.js"],"names":["Row","props","handleClick","row","id","OnSelectRow","state","open","this","selectedPatient","console","log","TableRow","TableCell","align","style","width","firstName","lastName","phone1","IconButton","aria-label","size","onClick","paddingBottom","paddingTop","height","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","gutterBottom","component","streetNr","zipCode","city","React","Component","activeIcon","icon","scaledSize","defaultIcon","CustomMarker","viewInfo","event","setState","closeInfo","patient","position","key","lat","lng","padding","name","options","onMouseOver","Geocode","setLanguage","setRegion","setApiKey","enableDebug","darkstyle","Maps","onPlaceSelected","place","address","formatted_address","addressArray","address_components","getCity","area","getArea","getState","latValue","geometry","location","lngValue","markerPosition","mapPosition","current","patientAddress","length","find","element","i","types","long_name","j","onChange","target","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","data","openData","test","patients","createRef","bind","user","JSON","parse","localStorage","getItem","instance_id","userService","getPatients","pagination","res","InitializePatient","self","map","index","a","fromAddress","push","AsyncMap","withScriptjs","withGoogleMap","className","Table","TableBody","ref","defaultZoom","defaultCenter","defaultOptions","styles","paddingLeft","marginTop","marginBottom","top","componentRestrictions","country","googleMapURL","loadingElement","containerElement","mapElement"],"mappings":"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","file":"static/js/64.76bb1b99.chunk.js","sourcesContent":["/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nclass Row extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n\r\n        }\r\n    }\r\n\r\n    handleClick = (row) => {  \r\n        \r\n        // let open = !row.id == selectedPatient;\r\n   \r\n        // this.setState({ open });\r\n      \r\n        if(row.id){\r\n            this.props.OnSelectRow(row.id);\r\n        }\r\n        \r\n    }\r\n    componentWillMount(){\r\n\r\n    }\r\n    render() {\r\n\r\n        let { row ,selectedPatient } = this.props;\r\n        console.log('open'  , this.props);\r\n    \r\n        return (\r\n            <>\r\n                <TableRow >\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.firstName + ' ' + row.lastName}</TableCell>\r\n                    <TableCell align=\"left\" style={{width : '40%'}}>{row.phone1}</TableCell>\r\n                    <TableCell align=\"right\" style={{width : '20%'}}>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.handleClick(row)}>\r\n                            {row.id == selectedPatient ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {row.id == selectedPatient ? <TableRow>\r\n                    <TableCell style={{ paddingBottom: 5, paddingTop: 5 , width : \"100%\" , height : 'auto'}} colSpan={6}>\r\n                        <Collapse in={row.id == selectedPatient} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.streetNr}\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    {row.zipCode} {row.city}\r\n                                </Typography>                               \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow> : ''}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\n\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\n\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass CustomMarker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedPatient: '',\r\n            open: false\r\n        }\r\n    }\r\n    viewInfo = (event) => {\r\n        console.log('event');\r\n        this.setState({ open: !this.state.open })\r\n    };\r\n    closeInfo = (event) => {\r\n        console.log('event');\r\n        this.setState({ open: false })\r\n    };\r\n    render() {\r\n        let { patient, position, key } = this.props;\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.open == true && <InfoWindow\r\n\r\n                        position={{ lat: (patient.lat + 0.002), lng: patient.lng }}\r\n                    >\r\n                        <div>\r\n                <span style={{ padding: 0, margin: 0 }}>{patient.name} {patient.streetNr} {patient.zipCode} {patient.city}</span>\r\n                        </div>\r\n                    </InfoWindow>\r\n                }\r\n                {\r\n                    patient.id ? <Marker\r\n                        options={patient.id == this.state.selectedPatient ? activeIcon : defaultIcon}\r\n                        key={key}\r\n                        name={'Dolores park'}\r\n                        position={position}\r\n                        onMouseOver={this.viewInfo}\r\n                    /> : <Marker\r\n                            key={key}\r\n                            name={'Dolores park'}\r\n                            position={position}\r\n                            onMouseOver={this.viewInfo}\r\n\r\n                        />\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default CustomMarker;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\n\r\nimport { CustomCard } from 'components/GlobalComponents';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\n\r\nimport Row from './Components/Row';\r\nimport CustomMarker from './Components/CustomMarker';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, Circle } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\n\r\nimport { GoogleMapsAPI } from './client-config';\r\n\r\n\r\nGeocode.setLanguage(\"de\");\r\nGeocode.setRegion(\"de\");\r\nGeocode.setApiKey(GoogleMapsAPI);\r\nGeocode.enableDebug();\r\nlet darkstyle = [\r\n\r\n\t{\r\n\t\t\"featureType\": \"poi.medical\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.school\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"poi.sports_complex\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"road.arterial\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.airport\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"featureType\": \"transit.station.rail\",\r\n\t\t\"stylers\": [\r\n\t\t\t{\r\n\t\t\t\t\"visibility\": \"off\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]\r\nlet activeIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/pink-dot.png`, scaledSize: 100 };\r\nlet defaultIcon = { icon: `http://maps.google.com/mapfiles/ms/icons/blue-dot.png`, scaledSize: 100 };\r\n\r\nclass Maps extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t\tdata: [],\r\n\t\t\topenData: {},\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\ttest: '',\r\n\t\t\tstate: '',\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: 51.2235516,\r\n\t\t\t\tlng: 6.6673354\r\n\t\t\t},\r\n\r\n\t\t\tpatients: [],\r\n\t\t\tpatientAddress: [],\r\n\t\t\tselectedPatient: '',\r\n\r\n\t\t};\r\n\t\tthis.CustomMarker = React.createRef();\r\n\t\tthis.Row = React.createRef();\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet user = JSON.parse(localStorage.getItem('user'));\r\n\t\tthis.instance_id = user.instance_id;\r\n\t\tconsole.log('res', this.instance_id);\r\n\t\tuserService.getPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\t\t\tconst data = res;\r\n\t\t\tthis.setState({ data });\r\n\t\t\tthis.InitializePatient(data);\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = (place) => {\r\n\t\tconsole.log('plc', place);\r\n\t\tconst address = place.formatted_address,\r\n\t\t\taddressArray = place.address_components,\r\n\t\t\tcity = this.getCity(addressArray),\r\n\t\t\tarea = this.getArea(addressArray),\r\n\t\t\tstate = this.getState(addressArray),\r\n\t\t\tlatValue = place.geometry.location.lat(),\r\n\t\t\tlngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.setState({\r\n\t\t\taddress: (address) ? address : '',\r\n\t\t\tarea: (area) ? area : '',\r\n\t\t\tcity: (city) ? city : '',\r\n\t\t\tstate: (state) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\r\n\t\t})\r\n\t};\r\n\r\n\thandleClick = (id) => {\r\n\r\n\t\tthis.CustomMarker.current.setState({ selectedPatient: id });\r\n\t\tif (this.state.patientAddress.length) {\r\n\t\t\tlet mapPosition = this.state.patientAddress.find(element => element.id == id);\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedPatient: id,\r\n\t\t\t\tmapPosition: {\r\n\t\t\t\t\tlat: mapPosition.lat,\r\n\t\t\t\t\tlng: mapPosition.lng\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tgetCity = (addressArray) => {\r\n\t\tlet city = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n\t\t\t\tcity = addressArray[i].long_name;\r\n\t\t\t\treturn city;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the area and set the area input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetArea = (addressArray) => {\r\n\t\tlet area = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tif (addressArray[i].types[0]) {\r\n\t\t\t\tfor (let j = 0; j < addressArray[i].types.length; j++) {\r\n\t\t\t\t\tif ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n\t\t\t\t\t\tarea = addressArray[i].long_name;\r\n\t\t\t\t\t\treturn area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the address and set the address input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetState = (addressArray) => {\r\n\t\tlet state = '';\r\n\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\tfor (let i = 0; i < addressArray.length; i++) {\r\n\t\t\t\tif (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n\t\t\t\t\tstate = addressArray[i].long_name;\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * And function for city,state and address input\r\n\t * @param event\r\n\t */\r\n\tonChange = (event) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t};\r\n\t/**\r\n\t * This Event triggers when the marker window is closed\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonInfoWindowClose = (event) => {\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\r\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n\t * And then set those values in the state.\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonMarkerDragEnd = (event) => {\r\n\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t\tnewLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng(newLat, newLng).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t\taddressArray = response.results[0].address_components,\r\n\t\t\t\t\tcity = addressArray.length ? this.getCity(addressArray) : '',\r\n\t\t\t\t\tarea = addressArray.length ? this.getArea(addressArray) : '',\r\n\t\t\t\t\tstate = addressArray.length ? this.getState(addressArray) : '';\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\taddress: (address) ? address : '',\r\n\t\t\t\t\tarea: (area) ? area : '',\r\n\t\t\t\t\tcity: (city) ? city : '',\r\n\t\t\t\t\tstate: (state) ? state : '',\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t};\r\n\r\n\r\n\r\n\tasync InitializePatient(patients) {\r\n\t\tlet self = this;\r\n\t\tlet patientAddress = [];\r\n\t\tpatients.map(async function (patient, index) {\r\n\t\t\tif (patient.streetNr) {\r\n\t\t\t\tlet response = await Geocode.fromAddress(patient.streetNr);\r\n\r\n\t\t\t\tconst { lat, lng } = response.results[0].geometry.location;\r\n\t\t\t\tif (lat && lng) {\r\n\r\n\t\t\t\t\tpatientAddress.push({ id: patient.id, lat: lat, lng: lng, name: patient.firstName + ' ' + patient.lastName, streetNr: patient.streetNr, zipCode: patient.zipCode, city: patient.city });\r\n\t\t\t\t\tif (patients.length - 2 < index) {\r\n\t\t\t\t\t\tself.setState({ patientAddress: patientAddress });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { data, selectedPatient, patientAddress } = this.state;\r\n\t\tconsole.log('this.state', this.state);\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t{/* <div className=\"mapContainer\"> */}\r\n\t\t\t\t\t\t<div className=\"patientsContainer\">\r\n\t\t\t\t\t\t\t<CustomCard>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"content\">\r\n\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t<Table aria-label=\"collapsible table \">\r\n\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.data.length > 0 && this.state.data.map((element, index) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Row ref={this.Row} key={index} row={element} OnSelectRow={this.handleClick} selectedPatient={selectedPatient} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</CustomCard>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<GoogleMap\r\n\r\n\t\t\t\t\t\t\tdefaultZoom={11}\r\n\t\t\t\t\t\t\tdefaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t\t\tdefaultOptions={{\r\n\t\t\t\t\t\t\t\tstyles: darkstyle\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{patientAddress.length > 0 && patientAddress.map((patient, index) => (\r\n\t\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} key={index} patient={patient} name={'Dolores park'} position={{ lat: patient.lat, lng: patient.lng }} />\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<CustomMarker ref={this.CustomMarker} patient={{ id: 0, lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng, streetNr: this.state.address }} position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }} />\r\n\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\t\tmarginTop: '2px',\r\n\t\t\t\t\t\t\t\t\tmarginBottom: '10px',\r\n\t\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\t\ttop: '10vh'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonPlaceSelected={this.onPlaceSelected}\r\n\t\t\t\t\t\t\t\ttypes={[\"address\"]}\r\n\t\t\t\t\t\t\t\tcomponentRestrictions={{ country: \"de\" }}\r\n\r\n\t\t\t\t\t\t\t/>\r\n\r\n\r\n\t\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t\t</>\r\n\r\n\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"tables-wrapper search-table-wrap\">\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: '90vh', position: \"relative\", }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default Maps;\r\n\r\n\r\n","export const GoogleMapsAPI = 'AIzaSyDMrIaIY6QY_kiOz0VSZkN36HBd4cnfkH8';\n"],"sourceRoot":""}