{"version":3,"sources":["routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/PatientsTable/Components/PageTemplates.js","routes/Tables/PatientsTable/index.js"],"names":["PreviewDialgo","props","state","open","instance","title","content","name","street","zip","city","insurance","insuranceNr","birthday","phone","pdfExportComponent","React","createRef","this","setState","setTimeout","names","document","getElementsByClassName","i","length","innerText","streets","zips","citys","insurances","insuranceNrs","birthdays","formate_date","phones","dateString","date","split","isTrue","logo","onClose","closeDialog","bind","aria-labelledby","className","onClick","onCloseDialog","id","selectedDocumentList","map","element","index","key","variant","textAlign","dangerouslySetInnerHTML","__html","Component","PageTemplate","url","console","log","instanceInfo","JSON","parse","localStorage","getItem","style","position","top","left","src","getUrl","instanceLogo","height","width","bottom","right","fontSize","pageNum","totalPages","color","instanceName","email","insuranceList","pharmaciesList","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollst√§ndig","family_doctorsList","resourcesList","servicesList","usersList","instances","instanceNames","PatientsTable","handleChangeDate","event","target","value","onChangeDoctor","familyDoctor","onChangePharmacies","pharmacy","onChangeInsurance","onChangeResources","selected","onChangeUsers","selectedUsers","indexOf","onChangeServices","selectedservice","columns","field","render","rowData","picture","defaultUrl","editComponent","type","onChange","e","files","lookup","TextField","defaultValue","InputLabelProps","shrink","selectedResources","resources","isEditResources","data","placeholder","selectedServices","services","currentService","isEditServices","find","x","instance_id","userGroup","isEditUsers","Switch","size","checked","serviceplan","isEditServiceplan","documentsList","folders","downloadDocs","preViewDialog","patient","relationDocs","forEach","folder","service","folderDocs","documents","relationDocsTemps","concat","Set","filter","a","firstName","lastName","streetNr","zipCode","phone1","current","openDialog","generatePdf","NotificationManager","warning","len","InstanceInfo","setItem","stringify","savePDF","ReactDOM","getElementById","pageTemplate","paperSize","margin","documentsLen","pageHight","ipageHight","clientHeight","paddingBottom","user","userService","showPatients","pagination","then","res","ele","users","push","family_doctors","doctorName","pharmacies","pharmacyName","prevState","patients","editableComponent","onRowAdd","newData","Promise","resolve","formData","FormData","append","addPatients","catch","error","alert","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","IntlMessages","center","Container","maxWidth","Box","px","xs","lg","options","actionRowIndex","editable","actions","icon","tooltip","previewDocument","PreViewDialog","ref"],"mappings":"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","file":"static/js/40.aa303758.chunk.js","sourcesContent":["/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.pdfExportComponent = React.createRef();\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: '',\r\n\t\tname: '',\r\n\t\tstreet: '',\r\n\t\tzip: '',\r\n\t\tcity: '',\r\n\t\tinsurance: '',\r\n\t\tinsuranceNr: '',\r\n\t\tbirthday: '',\r\n\t\tphone: ''\r\n\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true }, () => {\r\n\t\t\tlet { name, street, zip, city, insurance, insuranceNr, birthday, phone } = this.state;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar names = document.getElementsByClassName(\"name\");\r\n\t\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"name\")[i].innerText = name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar streets = document.getElementsByClassName(\"street\");\r\n\t\t\t\tfor (let i = 0; i < streets.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"street\")[i].innerText = street;\r\n\t\t\t\t}\r\n\t\t\t\tvar zips = document.getElementsByClassName(\"zip\");\r\n\t\t\t\tfor (let i = 0; i < zips.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"zip\")[i].innerText = zip;\r\n\t\t\t\t}\r\n\t\t\t\tvar citys = document.getElementsByClassName(\"city\");\r\n\t\t\t\tfor (let i = 0; i < citys.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"city\")[i].innerText = city;\r\n\t\t\t\t}\r\n\t\t\t\tvar insurances = document.getElementsByClassName(\"insurance\");\r\n\t\t\t\tfor (let i = 0; i < insurances.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insurance\")[i].innerText = insurance;\r\n\t\t\t\t}\r\n\t\t\t\tvar insuranceNrs = document.getElementsByClassName(\"insuranceNr\");\r\n\t\t\t\tfor (let i = 0; i < insuranceNrs.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insuranceNr\")[i].innerText = insuranceNr;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar birthdays = document.getElementsByClassName(\"birthday\");\r\n\t\t\t\tfor (let i = 0; i < birthdays.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"birthday\")[i].innerText = this.formate_date(birthday);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar phones = document.getElementsByClassName(\"phone\");\r\n\t\t\t\tfor (let i = 0; i < phones.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"phone\")[i].innerText = phone;\r\n\t\t\t\t}\r\n\r\n\t\t\t}, 10);\r\n\t\t});\r\n\t};\r\n\r\n\tformate_date(dateString) {\r\n\t\tlet date = '';\r\n\t\tif (dateString) {\r\n\t\t\tlet str = dateString.split(\" \");\r\n\t\t\tdate = str[0].split('-');\r\n\t\t\tdate = date[2] + '.' + date[1] + '.' + date[0];\r\n\t\t}\r\n\r\n\t\treturn date;\r\n\t}\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\t//let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t{/* <Box textAlign=\"center\" className=\"headerBar\">\r\n\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={this.getUrl(element.instanceLogo)} />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10\" >\r\n\t\t\t\t\t\t\t\t\t\t<div variant=\"h5\" className=\"title\" textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t{/* <Box bgcolor=\"background.paper\"  >\r\n\t\t\t\t\t\t\t\t\t\t<Box className=\"footerBar\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<div textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\tSeilte 3 von 3\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","import * as React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nexport default class PageTemplate extends React.Component {\r\n    getUrl(logo) {\r\n        let url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n        //  let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n       // let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpbeI4IdEQfeCLO9h67Z9SptqluMsBzJG-Ww&usqp=CAU\";\r\n       console.log('url' , url)\r\n        return url\r\n    }\r\n    render() {\r\n        let instanceInfo = JSON.parse(localStorage.getItem('instanceInfo'));\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{ position: \"absolute\", top: \"50px\", left: \"60px\" }}\r\n                    id=\"header\"\r\n                >\r\n                    <img src={this.getUrl(instanceInfo.instanceLogo)} height=\"auto\" width=\"100px\"/>\r\n                </div>\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", right: \"30px\", fontSize: \"12px\" }}\r\n                    id=\"footer\"\r\n                >\r\n\r\n                    Seite {this.props.pageNum} von {this.props.totalPages}\r\n                </div>\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", left: \"60px\", fontSize: \"12px\", color: \"#b6b6b6\" }}\r\n                    id=\"footer\"\r\n                >\r\n                    <div>{instanceInfo.instanceName}</div>\r\n                    Mail :  {instanceInfo.email}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { PDFExport, savePDF } from '@progress/kendo-react-pdf';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\nimport { AutoComplete, MultiSelect } from '@progress/kendo-react-dropdowns';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\nimport PageTemplate from './Components/PageTemplates';\r\n\r\nlet insuranceList = [];\r\nlet pharmaciesList = [];\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollst√§ndig: 'Unvollst√§ndig' };\r\nlet family_doctorsList = {};\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\nlet instances = {};\r\nlet instanceNames = [];\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation', lookup: salutationList },\r\n            { title: '*First Name', field: 'firstName' },\r\n            { title: '*Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n\r\n            {\r\n               title: 'Birthday', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {this.formate_date(rowData.birthday)}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={resourcesList}\r\n                        value={this.state.selected}\r\n                        onChange={this.onChangeResources}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Insurance', field: 'insurance', editComponent: rowData => {\r\n                  return (<AutoComplete data={insuranceList} placeholder=\"Select Insurance\" onChange={this.onChangeInsurance} />)\r\n               }\r\n            },\r\n            {\r\n               title: '*Insurance Nr', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              selectedServices.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        {/* <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList, props)} />\r\n                        </div> */}\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        data={servicesList}\r\n                        value={this.state.selectedservice}\r\n                        onChange={this.onChangeServices}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Family Doctor', field: 'familyDoctor', editComponent: rowData => {\r\n                  return (<AutoComplete data={family_doctorsList} placeholder=\"Select Family doctor\" onChange={this.onChangeDoctor} />)\r\n               }\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Pharmacy', field: 'pharmacy', editComponent: rowData => {\r\n                  return (<AutoComplete data={pharmaciesList} placeholder=\"Select Pharmacy\" onChange={this.onChangePharmacies} />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Instance', field: 'instance_id', render: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x,i) =>  i == rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else return <div></div>;\r\n\r\n               }, editComponent: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x,i) =>  i == rowData.rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else {\r\n                     return <div></div>;\r\n                  }\r\n               }\r\n            },\r\n            {\r\n               title: 'Related Users', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Serviceplan', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData', rowData);\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: []\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n\r\n   }\r\n\r\n   formate_date(dateString) {\r\n      let date = '';\r\n      if (dateString) {\r\n         let str = dateString.split(\" \");\r\n         date = str[0].split('-');\r\n         date = date[2] + '.' + date[1] + '.' + date[0];\r\n      }\r\n\r\n      return date;\r\n   }\r\n   previewDocument(services, patient) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            let relationDocsTemps = [...relationDocs];\r\n            console.log('folderDocs', folderDocs, relationDocsTemps);\r\n            relationDocs = relationDocsTemps.concat(folderDocs);\r\n         }\r\n      });\r\n      console.log('ssssssss', relationDocs.length, services);\r\n      relationDocs = [...new Set(relationDocs)];\r\n      if (relationDocs.length) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         let name = patient.firstName + ' ' + patient.lastName;\r\n         let street = patient.streetNr;\r\n         let zip = patient.zipCode;\r\n         let city = patient.city;\r\n         let insurance = patient.insurance;\r\n         let insuranceNr = patient.insuranceNr;\r\n         let birthday = patient.birthday;\r\n         let phone = patient.phone1;\r\n         this.preViewDialog.current.setState({ name: name, street: street, zip: zip, city: city, insurance: insurance, insuranceNr: insuranceNr, birthday: birthday, phone: phone })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n\r\n         }, 2000);\r\n      }\r\n      else {\r\n         NotificationManager.warning(\"Es gibt keine Pflegeordner, die optionale Dienste anbieten.\");\r\n      }\r\n   }\r\n   generatePdf(len) {\r\n      console.log('instances', instances);\r\n      let InstanceInfo = { instanceName: instances.instanceName, instanceLogo: instances.instanceLogo, email: instances.email, name: instances.name };\r\n      localStorage.setItem('instanceInfo', JSON.stringify(InstanceInfo));\r\n      console.log('instanceInfo', InstanceInfo);\r\n      savePDF(ReactDOM.findDOMNode(document.getElementById('downloadArea')), {\r\n         pageTemplate: PageTemplate,\r\n         paperSize: [794, 1123],\r\n         margin: { top: 70, left: 50, right: 20, bottom: 70 }\r\n      });\r\n   }\r\n\r\n   formate(documentsLen, pageHight) {\r\n\r\n      let pages = [];\r\n      console.log('formate');\r\n      for (let i = 0; i < documentsLen; i++) {\r\n         let ipageHight = document.getElementById(\"page-\" + i).clientHeight;\r\n         if (ipageHight > pageHight) {\r\n            document.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n         }\r\n      }\r\n      return pages;\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event) => {\r\n      this.setState({ familyDoctor: event.target.value })\r\n   }\r\n   onChangePharmacies = (event) => {\r\n      this.setState({ pharmacy: event.target.value })\r\n   }\r\n\r\n   onChangeInsurance = (event) => {\r\n      this.setState({ insurance: event.target.value });\r\n   }\r\n   onChangeResources = (event) => {\r\n      this.setState({\r\n         selected: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      let selectedUsers = [...event.target.value];\r\n      if(selectedUsers.length == usersList.length - 1 || selectedUsers.indexOf('all') > -1)selectedUsers = ['all'];     \r\n      this.setState({\r\n         selectedUsers: selectedUsers\r\n      });\r\n   }\r\n   onChangeServices = (event) => {\r\n\r\n      this.setState({\r\n         selectedservice: [...event.target.value]\r\n      });\r\n      console.log('selectedservices', this.state.selectedservice, [...event.target.value]);\r\n   }\r\n   componentWillMount() {\r\n      this.defaultUrl = \"http://base.mastermedi-1.vautronserver.de/backend_latest/file_storage/1602322608icon-patient-kl.png\";\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         resourcesList = [];\r\n         servicesList = [];\r\n         servicesList = res.services.map(ele => {\r\n            return ele.services\r\n         });\r\n\r\n         resourcesList = res.resources.map(ele => {\r\n            return ele.resources;\r\n         })\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         usersList.push(\"all\");\r\n         family_doctorsList = res.family_doctors.map(ele => {\r\n            return ele.doctorName;\r\n         })\r\n\r\n\r\n         insuranceList = res.insurances.map(ele => {\r\n            return ele.insurances;\r\n         })\r\n         pharmaciesList = res.pharmacies.map(ele => {\r\n            return ele.pharmacyName;\r\n         })\r\n         if (res.instances.length) {\r\n            instances = res.instances[0];\r\n\r\n         }\r\n         res.instanceNames.map(ele => {\r\n           \r\n           instanceNames[ele.id] = ele.instanceName;\r\n         })\r\n         console.log('resinstanceName', instanceNames)\r\n\r\n         // res.insurances.map(ele => {\r\n         //    insuranceList[ele.insurances] = ele.insurances;\r\n         // })\r\n\r\n\r\n         // res.pharmacies.map(ele => {\r\n         //    pharmaciesList[ele.pharmacyName] = ele.pharmacyName;\r\n         // })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n      let editableComponent = this.instance_id ? {\r\n         onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n\r\n                  newData.instance_id = this.instance_id;\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  newData.insurance = this.state.insurance;\r\n                  newData.familyDoctor = this.state.familyDoctor;\r\n                  newData.pharmacy = this.state.pharmacy;\r\n                  newData.birthday = this.state.birthday;\r\n                  newData.serviceplan = this.state.serviceplan;\r\n                  if (this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName) {\r\n                     const formData = new FormData()\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     userService.addPatients(formData).then(res => {\r\n                        const selected = [];\r\n                        const selectedservice = [];\r\n                        this.setState(prevState => {\r\n                           let data = [...prevState.data];\r\n                           data.push(res);\r\n                           return { ...prevState, data: [...data] };\r\n                        });\r\n\r\n                        this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                     }).catch(error => {\r\n                        console.log('erro', error);\r\n                        alert(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  const formData = new FormData()\r\n                  if (typeof newData.picture == 'object') {\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                  }\r\n                  console.log('dddddddddd---', this.state.selectedservice);\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                  if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                  if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                  if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                  if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                  formData.append('data', JSON.stringify(newData));\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     userService.editPatients(formData).then(res => {\r\n                        if (oldData) {\r\n                           this.setState(prevState => {\r\n                              const data = [...prevState.data];\r\n                              data[data.indexOf(oldData)] = res;\r\n                              return { ...prevState, data };\r\n                           });\r\n                           const selected = [];\r\n                           const selectedservice = [];\r\n                           this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                        }\r\n                     })\r\n                  } else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  console.log(';oldData', oldData.id);\r\n                  userService.deletePatients({ id: oldData.id }).then(res => {\r\n                     console.log('res', res);\r\n                     this.setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                     });\r\n                  })\r\n               }, 600);\r\n            }),\r\n      } : {\r\n            onRowUpdate: (newData, oldData) =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     const formData = new FormData()\r\n                     if (typeof newData.picture == 'object') {\r\n                        formData.append('file', newData.picture);\r\n                        newData.picture = '';\r\n                     }\r\n                     if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                     if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                     if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                     if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                     if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                     if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                     if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                     if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                        userService.editPatients(formData).then(res => {\r\n                           if (oldData) {\r\n                              this.setState(prevState => {\r\n                                 const data = [...prevState.data];\r\n                                 data[data.indexOf(oldData)] = res;\r\n                                 return { ...prevState, data };\r\n                              });\r\n                              const selected = [];\r\n                              const selectedservice = [];\r\n                              this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                           }\r\n                        })\r\n                     } else {\r\n                        alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                     }\r\n\r\n                  }, 600);\r\n               }),\r\n            onRowDelete: oldData =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     console.log(';oldData', oldData.id);\r\n                     userService.deletePatients({ id: oldData.id }).then(res => {\r\n                        console.log('res', res);\r\n                        this.setState(prevState => {\r\n                           const data = [...prevState.data];\r\n                           data.splice(data.indexOf(oldData), 1);\r\n                           return { ...prevState, data };\r\n                        });\r\n                     })\r\n                  }, 600);\r\n               }),\r\n         };\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space patient-container\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     options={{\r\n                        actionRowIndex: -1\r\n                     }}\r\n                     editable={editableComponent}\r\n                     actions={this.instance_id ? [\r\n                        {\r\n                           icon: 'folder_outlined_icon',\r\n                           tooltip: 'Download Care Folder',\r\n                           onClick: (event, rowData) => {\r\n                              let currentService = JSON.parse(rowData.services);\r\n                              this.previewDocument(currentService, rowData)\r\n                           }\r\n                        }\r\n                     ] : []}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}