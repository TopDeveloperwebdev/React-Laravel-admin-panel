{"version":3,"sources":["routes/Tables/PatientsTable/index.js"],"names":["insuranceList","pharmaciesList","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollständig","family_doctorsList","resourcesList","servicesList","usersList","PatientsTable","props","handleChangeDate","event","setState","birthday","target","value","onChangeDoctor","familyDoctor","onChangePharmacies","pharmacy","onChangeInsurance","insurance","onChangeResources","selected","onChangeUsers","selectedUsers","onChangeServices","selectedservice","state","columns","title","field","render","rowData","src","picture","defaultUrl","className","editComponent","type","onChange","e","files","lookup","id","defaultValue","InputLabelProps","shrink","selectedResources","JSON","parse","resources","map","index","key","isEditResources","data","placeholder","selectedServices","services","console","log","currentService","isEditServices","userGroup","isEditUsers","size","color","checked","serviceplan","isEditServiceplan","this","user","localStorage","getItem","instance_id","userService","showPatients","pagination","then","res","ele","users","name","family_doctors","doctorName","insurances","pharmacies","pharmacyName","prevState","patients","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","stringify","firstName","lastName","phone1","phone2","formData","FormData","append","addPatients","push","catch","error","alert","message","onRowUpdate","oldData","length","editPatients","indexOf","onRowDelete","deletePatients","splice","Component"],"mappings":"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","file":"static/js/60.42902edb.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\nimport { AutoComplete, MultiSelect } from '@progress/kendo-react-dropdowns';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nlet insuranceList = [];\r\nlet pharmaciesList = [];\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollständig: 'Unvollständig' };\r\nlet family_doctorsList = {};\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation', lookup: salutationList },\r\n            { title: '*First Name', field: 'firstName' },\r\n            { title: '*Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n\r\n            {\r\n               title: 'Birthday', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {rowData.birthday}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: '*Phone 1', field: 'phone1' },\r\n            { title: '*Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={resourcesList}\r\n                        value={this.state.selected}\r\n                        onChange={this.onChangeResources}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Insurance', field: 'insurance', editComponent: rowData => {\r\n                  return (<AutoComplete data={insuranceList} placeholder=\"Select Insurance\" onChange={this.onChangeInsurance} />)\r\n               }\r\n            },\r\n            {\r\n               title: '*Insurance Nr', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           servicesList.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        data={servicesList}\r\n                        value={this.state.selectedservice}\r\n                        onChange={this.onChangeServices}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Family Doctor', field: 'familyDoctor', editComponent: rowData => {\r\n                  return (<AutoComplete data={family_doctorsList} placeholder=\"Select Family doctor\" onChange={this.onChangeDoctor} />)\r\n               }\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Pharmacy', field: 'pharmacy', editComponent: rowData => {\r\n                  return (<AutoComplete data={pharmaciesList} placeholder=\"Select Pharmacy\" onChange={this.onChangePharmacies} />)\r\n               }\r\n            },\r\n            {\r\n               title: 'User group', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Serviceplan', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: ''\r\n      };\r\n\r\n\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event) => {\r\n      this.setState({ familyDoctor: event.target.value })\r\n   }\r\n   onChangePharmacies = (event) => {\r\n      this.setState({ pharmacy: event.target.value })\r\n   }\r\n\r\n   onChangeInsurance = (event) => {\r\n      this.setState({ insurance: event.target.value });\r\n   }\r\n   onChangeResources = (event) => {\r\n      this.setState({\r\n         selected: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      this.setState({\r\n         selectedUsers: [...event.target.value]\r\n      });\r\n   }\r\n   onChangeServices = (event) => {\r\n      this.setState({\r\n         selectedservice: [...event.target.value]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         resourcesList = [];\r\n         servicesList = [];\r\n         servicesList = res.services.map(ele => {\r\n            return ele.services\r\n         });\r\n\r\n         resourcesList = res.resources.map(ele => {\r\n            return ele.resources;\r\n         })\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         family_doctorsList = res.family_doctors.map(ele => {\r\n            return ele.doctorName;\r\n         })\r\n\r\n\r\n         insuranceList = res.insurances.map(ele => {\r\n            return ele.insurances;\r\n         })\r\n         pharmaciesList = res.pharmacies.map(ele => {\r\n            return ele.pharmacyName;\r\n         })\r\n\r\n\r\n         // res.insurances.map(ele => {\r\n         //    insuranceList[ele.insurances] = ele.insurances;\r\n         // })\r\n\r\n\r\n         // res.pharmacies.map(ele => {\r\n         //    pharmaciesList[ele.pharmacyName] = ele.pharmacyName;\r\n         // })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            return { ...prevState, data };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                                 newData.insurance = this.state.insurance;\r\n                                 newData.familyDoctor = this.state.familyDoctor;\r\n                                 newData.pharmacy = this.state.pharmacy;\r\n                                 newData.birthday = this.state.birthday;\r\n                                 if (this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName && newData.phone1 && newData.phone2) {\r\n                                    const formData = new FormData()\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                    formData.append('data', JSON.stringify(newData));\r\n                                    userService.addPatients(formData).then(res => {\r\n                                       const selected = [];\r\n                                       const selectedservice = [];\r\n                                       this.setState(prevState => {\r\n                                          let data = [...prevState.data];\r\n                                          data.push(res);\r\n                                          return { ...prevState, data: [...data] };\r\n                                       });\r\n\r\n                                       this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                                    }).catch(error => {\r\n                                       console.log('erro', error);\r\n                                       alert(error.message);\r\n                                    });\r\n                                 }\r\n                                 else {\r\n                                    alert(\"Bitte füllen Sie die erforderlichen Felder aus.\");\r\n                                 }\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n                                 if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                                 if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                                 if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                                 if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                                 if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                                 if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName && newData.phone1 && newData.phone2) {\r\n                                    userService.editPatients(formData).then(res => {\r\n                                       if (oldData) {\r\n                                          this.setState(prevState => {\r\n                                             const data = [...prevState.data];\r\n                                             data[data.indexOf(oldData)] = res;\r\n                                             return { ...prevState, data };\r\n                                          });\r\n                                          const selected = [];\r\n                                          const selectedservice = [];\r\n                                          this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                                       }\r\n                                    })\r\n                                 } else {\r\n                                    alert(\"Bitte füllen Sie die erforderlichen Felder aus.\");\r\n                                 }\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}