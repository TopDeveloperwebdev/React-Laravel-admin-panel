{"version":3,"sources":["routes/Tables/PatientsTable/index.js"],"names":["PatientsTable","props","state","columns","title","field","render","rowData","src","picture","defaultUrl","className","editComponent","type","onChange","e","target","files","native","inputProps","name","id","value","resources","map","ele","insurances","services","family_doctors","pharmacies","data","this","user","JSON","parse","localStorage","getItem","instance_id","console","log","userService","showPatients","pagination","then","res","setState","prevState","patients","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","formData","FormData","append","stringify","addPatients","push","onRowUpdate","oldData","editPatients","indexOf","onRowDelete","deletePatients","splice","Component"],"mappings":"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","file":"static/js/50.3bcae9ab.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation' },\r\n            { title: 'First Name', field: 'firstName' },\r\n            { title: 'Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n            { title: 'Birthday', field: 'birthday' },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources',\r\n               editComponent: props => (\r\n                  <FormControl >\r\n                     <Select\r\n                        native\r\n                        inputProps={{\r\n                           name: 'resources1',\r\n                           id: 'resources1-native-simple',\r\n                        }}\r\n                        onChange={e => props.onChange(e.target.value)}\r\n                     >\r\n                        {\r\n                           this.resources.map(ele => (\r\n                              <option value={ele.resources}>{ele.resources}</option>\r\n                           ))}\r\n                     </Select>\r\n                  </FormControl>),\r\n\r\n            },\r\n\r\n            {\r\n               title: 'Insurance', field: 'insurance', editComponent: props => (\r\n                  <FormControl >\r\n                     <Select\r\n                        native\r\n                        inputProps={{\r\n                           name: 'insurance1',\r\n                           id: 'insurance1-native-simple',\r\n                        }}\r\n                        onChange={e => props.onChange(e.target.value)}\r\n                     >\r\n                        {\r\n                           this.insurances.map(ele => (\r\n                              <option value={ele.insurances}>{ele.insurances}</option>\r\n                           ))}\r\n                     </Select>\r\n                  </FormControl>),\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', editComponent: props => (\r\n                  <FormControl >\r\n                     <Select\r\n                        native\r\n                        inputProps={{\r\n                           name: 'services',\r\n                           id: 'services-native-simple',\r\n                        }}\r\n                        onChange={e => props.onChange(e.target.value)}\r\n                     >\r\n                        {\r\n                           this.services.map(ele => (\r\n                              <option value={ele.services}>{ele.services}</option>\r\n                           ))}\r\n\r\n                     </Select>\r\n                  </FormControl>),\r\n            },\r\n            {\r\n               title: 'Family Doctor', field: 'familyDoctor', editComponent: props => (\r\n                  <FormControl >\r\n                     <Select\r\n                        native\r\n                        inputProps={{\r\n                           name: 'familyDoctor',\r\n                           id: 'familyDoctor-native-simple',\r\n                        }}\r\n                        onChange={e => props.onChange(e.target.value)}\r\n                     >\r\n                        {\r\n                           this.family_doctors.map(ele => (\r\n                              <option value={ele.family_doctors}>{ele.family_doctors}</option>\r\n                           ))}\r\n                     </Select>\r\n                  </FormControl>),\r\n            },\r\n            { title: 'Key number', field: 'keyNumber' },\r\n            { title: 'Floor', field: 'floor' },\r\n            { title: 'Degree of care', field: 'degreeCare' },\r\n            {\r\n               title: 'Pharmacy', field: 'pharmacy', editComponent: props => (\r\n                  <FormControl >\r\n                     <Select\r\n                        native\r\n                        inputProps={{\r\n                           name: 'pharmacy1',\r\n                           id: 'pharmacy-native-simple',\r\n                        }}\r\n                        onChange={e => props.onChange(e.target.value)}\r\n                     >\r\n                        {\r\n                           this.pharmacies.map(ele => (\r\n                              <option value={ele.pharmacies}>{ele.pharmacies}</option>\r\n                           ))}\r\n                     </Select>\r\n                  </FormControl>),\r\n            },\r\n            { title: 'User group', field: 'userGroup' },\r\n            { title: 'Status', field: 'status' },\r\n         ],\r\n         data: [],\r\n\r\n      };\r\n\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user_id'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         console.log(';res', res);\r\n         this.services = res.services;\r\n         this.family_doctors = res.family_doctors;\r\n         this.resources = res.resources;\r\n         this.insurances = res.insurances;\r\n         this.pharmacies = res.pharmacies;\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            return { ...prevState, data };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 const formData = new FormData()\r\n                                 formData.append('file', newData.picture);\r\n                                 newData.picture = '';\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 userService.addPatients(formData).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.push(res);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 });\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 console.log('newData', newData);\r\n                                 userService.editPatients(formData).then(res => {\r\n                                    if (oldData) {\r\n                                       this.setState(prevState => {\r\n                                          const data = [...prevState.data];\r\n                                          data[data.indexOf(oldData)] = res;\r\n                                          return { ...prevState, data };\r\n                                       });\r\n                                    }\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}