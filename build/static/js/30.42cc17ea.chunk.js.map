{"version":3,"sources":["../node_modules/@material-ui/icons/Close.js","routes/Tables/PatientsTable/Components/PageTemplates.js","routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/Carefolders/Components/styles.js","routes/Tables/PatientsTable/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","PageTemplate","logo","url","split","console","log","instanceInfo","JSON","parse","localStorage","getItem","style","position","top","left","id","src","this","getUrl","instanceLogo","maxHeight","height","width","bottom","fontSize","color","fontFamily","instanceName","email","React","PreviewDialgo","props","state","open","instance","title","content","name","street","zip","city","insurance","insuranceNr","birthday","phone","pdfExportComponent","createRef","setState","setTimeout","names","document","getElementsByClassName","i","length","innerText","streets","zips","citys","insurances","insuranceNrs","birthdays","formate_date","phones","dateString","date","isTrue","Dialog","onClose","closeDialog","bind","aria-labelledby","className","DialogContent","Box","onClick","onCloseDialog","selectedDocumentList","map","element","index","key","variant","textAlign","dangerouslySetInnerHTML","__html","Component","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollst√§ndig","resourcesList","servicesList","usersList","instances","instanceNames","PatientsTable","handleChangeDate","event","target","onChangeDoctor","familyDoctorData","familyDoctor","doctorName","onChangeCareManager","caremanagerData","caremanager","onChangePharmacies","pharmacyData","pharmacy","pharmacyName","onChangeInsurance","insuranceData","onChangeResources","Resources","resources","selected","onChangeUsers","selectedUsers","indexOf","onChangeServices","Services","services","selectedservice","columns","field","render","rowData","picture","editComponent","type","onChange","e","files","lookup","defaultValue","InputLabelProps","shrink","selectedResources","resourcesDatas","isEditResources","selectedElement","find","multiple","options","getOptionLabel","option","renderInput","params","placeholder","isEditInsurance","insuranceList","autoComplete","includeInputInList","margin","selectedServices","servicesDatas","currentService","isEditServices","isEditfamilyDoctor","family_doctorsList","ansprechpartner","isEditCaremanager","caremanagersList","isEditPharmacy","pharmaciesList","hidden","x","instance_id","userGroup","isEditUsers","data","size","checked","serviceplan","isEditServiceplan","documentsList","folders","downloadDocs","preViewDialog","patient","relationDocs","forEach","folder","service","documents","push","Set","filter","a","firstName","lastName","streetNr","zipCode","phone1","current","openDialog","generatePdf","NotificationManager","warning","len","InstanceInfo","setItem","stringify","savePDF","ReactDOM","getElementById","pageTemplate","paperSize","right","documentsLen","pageHight","ipageHight","clientHeight","paddingBottom","user","userService","showPatients","pagination","then","res","users","ele","family_doctors","caremanagers","pharmacies","prevState","patients","editableComponent","onRowAdd","newData","Promise","resolve","formData","FormData","append","addPatients","success","catch","error","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","center","maxWidth","px","xs","lg","localization","header","actions","actionRowIndex","editable","icon","tooltip","previewDocument","ref"],"mappings":"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","file":"static/js/30.42cc17ea.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import * as React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nexport default class PageTemplate extends React.Component {\r\n    getUrl(logo) {\r\n        let url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n        console.log('url' , url);\r\n        //  let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n       // let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpbeI4IdEQfeCLO9h67Z9SptqluMsBzJG-Ww&usqp=CAU\";\r\n       console.log('url' , url)\r\n        return url\r\n    }\r\n    render() {\r\n        let instanceInfo = JSON.parse(localStorage.getItem('instanceInfo'));\r\n        return (\r\n            <div >\r\n                <div\r\n                    style={{ position: \"absolute\", top: \"50px\", left: \"60px\" }}\r\n                    id=\"header\"\r\n                >\r\n                    <img src={this.getUrl(instanceInfo.instanceLogo) } style={{ maxHeight: \"60px\"}} height=\"auto\" width=\"100px\"/>\r\n                </div>\r\n                {/* <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", right: \"30px\", fontSize: \"12px\" }}\r\n                    id=\"footer\"\r\n                >\r\n\r\n                    Seite {this.props.pageNum} von {this.props.totalPages}\r\n                </div> */}\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", left: \"60px\", fontSize: \"12px\", color: \"#b6b6b6\" , fontFamily : 'Arial' }}\r\n                    id=\"footer\"\r\n                >\r\n                    <div style={{fontFamily : 'Arial' }}>{instanceInfo.instanceName}</div>\r\n                    Mail:  {instanceInfo.email}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { styles } from './styles.js';\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.pdfExportComponent = React.createRef();\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: '',\r\n\t\tname: '',\r\n\t\tstreet: '',\r\n\t\tzip: '',\r\n\t\tcity: '',\r\n\t\tinsurance: '',\r\n\t\tinsuranceNr: '',\r\n\t\tbirthday: '',\r\n\t\tphone: ''\r\n\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true }, () => {\r\n\t\t\tlet { name, street, zip, city, insurance, insuranceNr, birthday, phone } = this.state;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar names = document.getElementsByClassName(\"name\");\r\n\t\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"name\")[i].innerText = name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar streets = document.getElementsByClassName(\"street\");\r\n\t\t\t\tfor (let i = 0; i < streets.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"street\")[i].innerText = street;\r\n\t\t\t\t}\r\n\t\t\t\tvar zips = document.getElementsByClassName(\"zip\");\r\n\t\t\t\tfor (let i = 0; i < zips.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"zip\")[i].innerText = zip;\r\n\t\t\t\t}\r\n\t\t\t\tvar citys = document.getElementsByClassName(\"city\");\r\n\t\t\t\tfor (let i = 0; i < citys.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"city\")[i].innerText = city;\r\n\t\t\t\t}\r\n\t\t\t\tvar insurances = document.getElementsByClassName(\"insurance\");\r\n\t\t\t\tfor (let i = 0; i < insurances.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insurance\")[i].innerText = insurance;\r\n\t\t\t\t}\r\n\t\t\t\tvar insuranceNrs = document.getElementsByClassName(\"insuranceNr\");\r\n\t\t\t\tfor (let i = 0; i < insuranceNrs.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insuranceNr\")[i].innerText = insuranceNr;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar birthdays = document.getElementsByClassName(\"birthday\");\r\n\t\t\t\tfor (let i = 0; i < birthdays.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"birthday\")[i].innerText = this.formate_date(birthday);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar phones = document.getElementsByClassName(\"phone\");\r\n\t\t\t\tfor (let i = 0; i < phones.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"phone\")[i].innerText = phone;\r\n\t\t\t\t}\r\n\r\n\t\t\t}, 10);\r\n\t\t});\r\n\t};\r\n\r\n\tformate_date(dateString) {\r\n\t\tlet date = '';\r\n\t\tif (dateString) {\r\n\t\t\tlet str = dateString.split(\" \");\r\n\t\t\tdate = str[0].split('-');\r\n\t\t\tdate = date[2] + '.' + date[1] + '.' + date[0];\r\n\t\t}\r\n\r\n\t\treturn date;\r\n\t}\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\t//let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t{/* <Box textAlign=\"center\" className=\"headerBar\">\r\n\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={this.getUrl(element.instanceLogo)} />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10\" >\r\n\t\t\t\t\t\t\t\t\t\t<div variant=\"h5\" className=\"title\" textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t{/* <Box bgcolor=\"background.paper\"  >\r\n\t\t\t\t\t\t\t\t\t\t<Box className=\"footerBar\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<div textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\tSeilte 3 von 3\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<style>{styles}</style>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","export const styles = `\r\n    /* Use the DejaVu Sans font for displaying and embedding in the PDF file. The standard PDF fonts do not support Unicode characters. */\r\n     h4{\r\n        font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n        }\r\n        p,div {\r\n            font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n    \r\n        }\r\n\r\n    /* The examples load the DejaVu Sans from the KendoReact CDN. Other fonts have to be hosted from your application.\r\n    The official site of the Deja Vu Fonts project is https://dejavu-fonts.github.io/. */\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Bold.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n`;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { PDFExport, savePDF } from '@progress/kendo-react-pdf';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\nimport PageTemplate from './Components/PageTemplates';\r\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\r\n\r\n\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollst√§ndig: 'Unvollst√§ndig' };\r\n\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\nlet instances = {};\r\nlet instanceNames = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Bild', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : require(`assets/Images/patient.png`)} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Anrede', field: 'salutation', lookup: salutationList },\r\n            { title: '*Vorname', field: 'firstName' },\r\n            { title: '*Nachname', field: 'lastName' },\r\n            { title: 'Stra√üe', field: 'streetNr' },\r\n            { title: 'PLZ', field: 'zipCode' },\r\n            { title: 'Ort', field: 'city' },\r\n\r\n            {\r\n               title: 'Geburtstag', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {this.formate_date(rowData.birthday)}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: 'Telefon 1', field: 'phone1' },\r\n            { title: 'Telefon 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Bereich', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let resourcesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n\r\n\r\n                  }\r\n                  resourcesDatas = this.state.selected.map(selectedElement => {\r\n                     console.log('resource', selectedElement);\r\n                     return resourcesList.find(element => element.resources == selectedElement);\r\n                  })\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={resourcesList}\r\n                        getOptionLabel={(option) => option.resources}\r\n                        value={resourcesDatas}\r\n                        onChange={this.onChangeResources}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Bereich\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Versicherung', field: 'insurance', editComponent: rowData => {\r\n                  console.log('rowData-------', this.state.insuranceData);\r\n                  if (rowData.rowData.id) {\r\n                     let insurance = rowData.rowData.insurance;\r\n                     if (this.state.isEditInsurance) {\r\n                        let insuranceData = this.state.insuranceList.find(element => element.insurances == insurance);\r\n                        this.setState({ isEditInsurance: false, insurance: insurance, insuranceData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.insuranceList}\r\n                     getOptionLabel={(option) => option.insurances}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     value={this.state.insuranceData}\r\n                     includeInputInList\r\n                     onChange={this.onChangeInsurance}\r\n                     renderInput={(params) => <TextField\r\n                        placeholder=\"Versicherung\"\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Versicherten-Nr.', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Leistungen', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              selectedServices.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        {/* <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList, props)} />\r\n                        </div> */}\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let servicesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n\r\n\r\n                  }\r\n                  servicesDatas = this.state.selectedservice.map(selectedElement => {\r\n                     console.log('resource', selectedElement);\r\n                     return servicesList.find(element => element.services == selectedElement);\r\n                  })\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={servicesList}\r\n                        getOptionLabel={(option) => option.services}\r\n                        onChange={this.onChangeServices}\r\n                        value={servicesDatas}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Leistungen\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Familiendoktor', field: 'familyDoctor', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let familyDoctor = rowData.rowData.familyDoctor;\r\n                     if (this.state.isEditfamilyDoctor) {\r\n                        let familyDoctorData = this.state.family_doctorsList.find(element => element.doctorName == familyDoctor);\r\n                        this.setState({ isEditfamilyDoctor: false, familyDoctor: familyDoctor, familyDoctorData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.family_doctorsList}\r\n                     getOptionLabel={(option) => option.doctorName}\r\n                     value={this.state.familyDoctorData}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeDoctor}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Familiendoktor\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: '*Ansprechpartner', field: 'ansprechpartner', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let caremanager = rowData.rowData.ansprechpartner;\r\n                     if (this.state.isEditCaremanager) {\r\n                        let caremanagerData = this.state.caremanagersList.find(element => element.id == caremanager);\r\n                        this.setState({ isEditCaremanager: false, caremanager: caremanager, caremanagerData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.caremanagersList}\r\n                     getOptionLabel={(option) => option.ansprechpartner}\r\n                     value={this.state.caremanagerData}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeCareManager}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Familiendoktor\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            { title: 'Schl√ºssel-Nr.', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Etage', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Pflegegrad', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Apotheke', field: 'pharmacy', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let pharmacy = rowData.rowData.pharmacy;\r\n                     if (this.state.isEditPharmacy) {\r\n                        let pharmacyData = this.state.pharmaciesList.find(element => element.pharmacyName == pharmacy);\r\n                        this.setState({ isEditPharmacy: false, pharmacy: pharmacy, pharmacyData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.pharmaciesList}\r\n                     getOptionLabel={(option) => option.pharmacyName}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangePharmacies}\r\n                     value={this.state.pharmacyData}\r\n\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Apotheke\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Instance', field: 'instance_id', hidden: false, render: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else return <div></div>;\r\n\r\n               }, editComponent: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else {\r\n                     return <div></div>;\r\n                  }\r\n               },\r\n\r\n            },\r\n            {\r\n               title: 'Nutzergruppe', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Benachrichtigungen', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         isEditInsurance: true,\r\n         isEditfamilyDoctor: true,\r\n         isEditPharmacy: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: [],\r\n         family_doctorsList: [],\r\n         caremanagersList: [],\r\n         insuranceList: [],\r\n         familyDoctorData: null,\r\n         insuranceData: null,\r\n         pharmaciesList: [],\r\n         pharmacyData: null,\r\n         caremanager: '',\r\n         caremanagerData: null\r\n\r\n\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n\r\n   }\r\n\r\n   formate_date(dateString) {\r\n      let date = '';\r\n      if (dateString) {\r\n         let str = dateString.split(\" \");\r\n         date = str[0].split('-');\r\n         date = date[2] + '.' + date[1] + '.' + date[0];\r\n      }\r\n\r\n      return date;\r\n   }\r\n   previewDocument(services, patient) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            folderDocs.map(element => {\r\n               relationDocs.push(element);\r\n            })\r\n         }\r\n      });\r\n\r\n      console.log('ssssssss1', relationDocs);\r\n      relationDocs = [...new Set(relationDocs)];\r\n      console.log('ssssssss2', relationDocs);\r\n      if (relationDocs.length) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         let name = patient.firstName + ' ' + patient.lastName;\r\n         let street = patient.streetNr;\r\n         let zip = patient.zipCode;\r\n         let city = patient.city;\r\n         let insurance = patient.insurance;\r\n         let insuranceNr = patient.insuranceNr;\r\n         let birthday = patient.birthday;\r\n         let phone = patient.phone1;\r\n         this.preViewDialog.current.setState({ name: name, street: street, zip: zip, city: city, insurance: insurance, insuranceNr: insuranceNr, birthday: birthday, phone: phone })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n\r\n         }, 2000);\r\n      }\r\n      else {\r\n         NotificationManager.warning(\"Es gibt keine Pflegeordner, die optionale Dienste anbieten.\");\r\n      }\r\n   }\r\n   generatePdf(len) {\r\n      console.log('instances', instances);\r\n      let InstanceInfo = { instanceName: instances.instanceName, instanceLogo: instances.instanceLogo, email: instances.email, name: instances.name };\r\n      localStorage.setItem('instanceInfo', JSON.stringify(InstanceInfo));\r\n      console.log('instanceInfo', InstanceInfo);\r\n      savePDF(ReactDOM.findDOMNode(document.getElementById('downloadArea')), {\r\n         pageTemplate: PageTemplate,\r\n         paperSize: [794, 1123],\r\n         margin: { top: 100, left: 50, right: 20, bottom: 70 }\r\n      });\r\n   }\r\n\r\n   formate(documentsLen, pageHight) {\r\n\r\n      let pages = [];\r\n      console.log('formate');\r\n      for (let i = 0; i < documentsLen; i++) {\r\n         let ipageHight = document.getElementById(\"page-\" + i).clientHeight;\r\n         if (ipageHight > pageHight) {\r\n            document.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n         }\r\n      }\r\n      return pages;\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event, familyDoctorData) => {\r\n      if (familyDoctorData) {\r\n         this.setState({ familyDoctor: familyDoctorData.doctorName, familyDoctorData })\r\n      }\r\n\r\n   }\r\n   onChangeCareManager = (event, caremanagerData) => {\r\n\r\n      if (caremanagerData) {\r\n         this.setState({ caremanager: caremanagerData.id, caremanagerData })\r\n      }\r\n\r\n   }\r\n\r\n   onChangePharmacies = (event, pharmacyData) => {\r\n      if (pharmacyData) {\r\n         this.setState({ pharmacy: pharmacyData.pharmacyName, pharmacyData })\r\n      }\r\n   }\r\n   onChangeInsurance = (event, insuranceData) => {\r\n      if (insuranceData) {\r\n         this.setState({ insurance: insuranceData.insurances, insuranceData })\r\n      }\r\n   }\r\n   onChangeResources = (event, Resources) => {\r\n      let resources = Resources.map(element => element.resources);\r\n      this.setState({\r\n         selected: [...resources]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      let selectedUsers = [...event.target.value];\r\n      if (selectedUsers.length == usersList.length - 1 || selectedUsers.indexOf('all') > -1) selectedUsers = ['all'];\r\n      this.setState({\r\n         selectedUsers: selectedUsers\r\n      });\r\n   }\r\n   onChangeServices = (event, Services) => {\r\n      let services = Services.map(element => element.services);\r\n\r\n      this.setState({\r\n         selectedservice: [...services]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\r\n         this.setState(state => {\r\n            let columns = state.columns;\r\n            state.columns[21].hidden = (this.instance_id ? true : false);\r\n            return {\r\n               columns\r\n            };\r\n         })\r\n\r\n\r\n         servicesList = [];\r\n         servicesList = res.services\r\n\r\n         resourcesList = res.resources;\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         usersList.push(\"all\");\r\n\r\n         let family_doctorsList = res.family_doctors;\r\n         let caremanagersList = res.caremanagers;\r\n\r\n         let insuranceList = res.insurances;\r\n         let pharmaciesList = res.pharmacies;\r\n\r\n         if (res.instances.length) {\r\n            instances = res.instances[0];\r\n\r\n         }\r\n         instanceNames = [];\r\n         res.instanceNames.map(ele => {\r\n\r\n            instanceNames[ele.id] = ele.instanceName;\r\n         })\r\n         console.log('resinstanceName', instanceNames)\r\n\r\n\r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders, family_doctorsList, insuranceList, pharmaciesList, caremanagersList };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n\r\n      let editableComponent = this.instance_id ? {\r\n         onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n\r\n                  newData.instance_id = this.instance_id;\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  newData.insurance = this.state.insurance;\r\n                  newData.familyDoctor = this.state.familyDoctor;\r\n                  newData.pharmacy = this.state.pharmacy;\r\n                  newData.birthday = this.state.birthday;\r\n                  newData.caremanager = this.state.caremanager;\r\n                  newData.serviceplan = this.state.serviceplan;\r\n                  console.log('this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName', this.state.pharmacy);\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     const formData = new FormData()\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     userService.addPatients(formData).then(res => {\r\n                        const selected = [];\r\n                        const selectedservice = [];\r\n                        this.setState(prevState => {\r\n                           let data = [...prevState.data];\r\n                           data.push(res);\r\n                           return { ...prevState, data: [...data] };\r\n                        });\r\n\r\n                        this.setState({\r\n                           selected: selected,\r\n                           selectedservice: selectedservice,\r\n                           isEditServices: true,\r\n                           isEditResources: true,\r\n                           isEditServiceplan: true,\r\n                           isEditPharmacy: true,\r\n                           isEditUsers: true,\r\n                           isEditfamilyDoctor: true,\r\n                           isEditInsurance: true,\r\n                           isEditCaremanager: true,\r\n                           insurance: \"\",\r\n                           familyDoctor: \"\",\r\n                           pharmacy: '',\r\n                           birthday: '',\r\n                           caremanager: '',\r\n                           selectedUsers: []\r\n                        });\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                     }).catch(error => {\r\n                        NotificationManager.error(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n\r\n                     NotificationManager.warning(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\")\r\n                  }\r\n               }, 600);\r\n            }),\r\n         onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  const formData = new FormData()\r\n                  if (typeof newData.picture == 'object') {\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                  }\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                  if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                  if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                  if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                  if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                  if (this.state.caremanager) newData.caremanager = this.state.caremanager;\r\n                  formData.append('data', JSON.stringify(newData));\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     userService.editPatients(formData).then(res => {\r\n                        if (oldData) {\r\n                           this.setState(prevState => {\r\n                              const data = [...prevState.data];\r\n                              data[data.indexOf(oldData)] = res;\r\n                              return { ...prevState, data };\r\n                           });\r\n                           const selected = [];\r\n                           const selectedservice = [];\r\n                           this.setState({\r\n                              selected: selected,\r\n                              selectedservice: selectedservice,\r\n                              isEditServices: true,\r\n                              isEditResources: true,\r\n                              isEditServiceplan: true,\r\n                              isEditPharmacy: true,\r\n                              isEditUsers: true,\r\n                              isEditfamilyDoctor: true,\r\n                              isEditInsurance: true,\r\n                              isEditCaremanager: true,\r\n                              caremanager: '',\r\n                              insurance: \"\",\r\n                              familyDoctor: \"\",\r\n                              pharmacy: '',\r\n                              birthday: '',\r\n                              selectedUsers: [],\r\n                              serviceplan: true\r\n                           });\r\n                        }\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                     }).catch(error => {\r\n                        NotificationManager.error(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n\r\n                     NotificationManager.warning(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\")\r\n                  }\r\n               }, 600);\r\n            }),\r\n         onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  console.log(';oldData', oldData.id);\r\n                  userService.deletePatients({ id: oldData.id }).then(res => {\r\n                     console.log('res', res);\r\n                     this.setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                     });\r\n                     NotificationManager.success(\"Die Daten werden erfolgreich gel√∂scht.\")\r\n                  })\r\n\r\n               }, 600);\r\n            }),\r\n      } : {\r\n            onRowUpdate: (newData, oldData) =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     const formData = new FormData()\r\n                     if (typeof newData.picture == 'object') {\r\n                        formData.append('file', newData.picture);\r\n                        newData.picture = '';\r\n                     }\r\n                     if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                     if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                     if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                     if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                     if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                     if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                     if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                     if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                        userService.editPatients(formData).then(res => {\r\n                           if (oldData) {\r\n                              this.setState(prevState => {\r\n                                 const data = [...prevState.data];\r\n                                 data[data.indexOf(oldData)] = res;\r\n                                 return { ...prevState, data };\r\n                              });\r\n                              const selected = [];\r\n                              const selectedservice = [];\r\n                              this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                           }\r\n\r\n                           NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                        }).catch(error => {\r\n                           NotificationManager.error(error.message);\r\n                        });\r\n                     }\r\n                     else {\r\n                        NotificationManager.warning(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\")\r\n                     }\r\n                  }, 600);\r\n               }),\r\n            onRowDelete: oldData =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     console.log(';oldData', oldData.id);\r\n                     userService.deletePatients({ id: oldData.id }).then(res => {\r\n                        console.log('res', res);\r\n                        this.setState(prevState => {\r\n                           const data = [...prevState.data];\r\n                           data.splice(data.indexOf(oldData), 1);\r\n                           return { ...prevState, data };\r\n                        });\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gel√∂scht.\")\r\n                     })\r\n                  }, 600);\r\n               }),\r\n         };\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space patient-container\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     localization={{\r\n                        header: {\r\n                           actions: 'Funktionen'\r\n                        },\r\n                     }}\r\n                     options={{\r\n                        actionRowIndex: -1\r\n                     }}\r\n                     editable={editableComponent}\r\n                     actions={this.instance_id ? [\r\n                        {\r\n                           icon: 'folder_outlined_icon',\r\n                           tooltip: 'Download Care Folder',\r\n                           onClick: (event, rowData) => {\r\n                              let currentService = JSON.parse(rowData.services);\r\n                              this.previewDocument(currentService, rowData)\r\n                           }\r\n                        }\r\n                     ] : []}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}