{"version":3,"sources":["../node_modules/@material-ui/icons/Close.js","routes/Tables/PatientsTable/Components/PageTemplates.js","routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/Carefolders/Components/styles.js","routes/Tables/PatientsTable/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","PageTemplate","logo","url","split","console","log","instanceInfo","JSON","parse","localStorage","getItem","style","position","top","left","id","src","this","getUrl","instanceLogo","maxHeight","height","width","bottom","fontSize","color","fontFamily","instanceName","email","React","PreviewDialgo","props","state","open","instance","title","content","name","street","zip","city","insurance","insuranceNr","birthday","phone","pdfExportComponent","createRef","setState","setTimeout","names","document","getElementsByClassName","i","length","innerText","streets","zips","citys","insurances","insuranceNrs","birthdays","formate_date","phones","dateString","date","isTrue","Dialog","onClose","closeDialog","bind","aria-labelledby","className","DialogContent","Box","onClick","onCloseDialog","selectedDocumentList","map","element","index","key","variant","textAlign","dangerouslySetInnerHTML","__html","Component","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aufnahme","Aktiv","Inakktiv","resourcesList","servicesList","usersList","instances","instanceNames","PatientsTable","handleChangeNote","event","target","note","handleChangeDate","onChangeDoctor","familyDoctorData","familyDoctor","doctorName","onChangeCareManager","caremanagerData","caremanagersList","caremanager","onChangePharmacies","pharmacyData","pharmacy","pharmacyName","onChangeInsurance","insuranceData","onChangeResources","Resources","resources","selected","onChangeUsers","selectedUsers","indexOf","onChangeServices","Services","services","selectedservice","columns","field","render","rowData","picture","editComponent","type","onChange","e","files","filtering","lookup","defaultValue","InputLabelProps","shrink","selectedResources","resourcesDatas","isEditResources","selectedElement","find","multiple","options","getOptionLabel","option","renderInput","params","placeholder","isEditInsurance","insuranceList","autoComplete","includeInputInList","margin","selectedServices","servicesDatas","currentService","isEditServices","isEditfamilyDoctor","family_doctorsList","isEditCaremanager","firstName","lastName","isEditPharmacy","pharmaciesList","hidden","x","instance_id","userGroup","isEditUsers","data","rowdata","labelId","statusArray","handleChange","isEditNote","label","multiline","rows","size","checked","serviceplan","isEditServiceplan","documentsList","folders","downloadDocs","completed","preViewDialog","userService","editStatus","status","then","res","prevState","NotificationManager","success","catch","error","patient","relationDocs","forEach","folder","service","documents","push","Set","filter","a","streetNr","zipCode","phone1","current","openDialog","generatePdf","warning","len","InstanceInfo","setItem","stringify","savePDF","ReactDOM","getElementById","pageTemplate","paperSize","right","documentsLen","pageHight","ipageHight","clientHeight","paddingBottom","user","showPatients","pagination","users","ele","family_doctors","caremanagers","pharmacies","patients","editableComponent","onRowAdd","newData","Promise","resolve","formData","FormData","append","addPatients","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","center","maxWidth","px","xs","lg","localization","header","actions","actionRowIndex","editable","icon","tooltip","previewDocument","ref"],"mappings":"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","file":"static/js/30.4643378a.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import * as React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nexport default class PageTemplate extends React.Component {\r\n    getUrl(logo) {\r\n        let url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n        console.log('url' , url);\r\n        //  let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n       // let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpbeI4IdEQfeCLO9h67Z9SptqluMsBzJG-Ww&usqp=CAU\";\r\n       console.log('url' , url)\r\n        return url\r\n    }\r\n    render() {\r\n        let instanceInfo = JSON.parse(localStorage.getItem('instanceInfo'));\r\n        return (\r\n            <div >\r\n                <div\r\n                    style={{ position: \"absolute\", top: \"50px\", left: \"60px\" }}\r\n                    id=\"header\"\r\n                >\r\n                    <img src={this.getUrl(instanceInfo.instanceLogo) } style={{ maxHeight: \"60px\"}} height=\"auto\" width=\"100px\"/>\r\n                </div>\r\n                {/* <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", right: \"30px\", fontSize: \"12px\" }}\r\n                    id=\"footer\"\r\n                >\r\n\r\n                    Seite {this.props.pageNum} von {this.props.totalPages}\r\n                </div> */}\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", left: \"60px\", fontSize: \"12px\", color: \"#b6b6b6\" , fontFamily : 'Arial' }}\r\n                    id=\"footer\"\r\n                >\r\n                    <div style={{fontFamily : 'Arial' }}>{instanceInfo.instanceName}</div>\r\n                    Mail:  {instanceInfo.email}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { styles } from './styles.js';\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.pdfExportComponent = React.createRef();\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: '',\r\n\t\tname: '',\r\n\t\tstreet: '',\r\n\t\tzip: '',\r\n\t\tcity: '',\r\n\t\tinsurance: '',\r\n\t\tinsuranceNr: '',\r\n\t\tbirthday: '',\r\n\t\tphone: ''\r\n\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true }, () => {\r\n\t\t\tlet { name, street, zip, city, insurance, insuranceNr, birthday, phone } = this.state;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar names = document.getElementsByClassName(\"name\");\r\n\t\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"name\")[i].innerText = name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar streets = document.getElementsByClassName(\"street\");\r\n\t\t\t\tfor (let i = 0; i < streets.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"street\")[i].innerText = street;\r\n\t\t\t\t}\r\n\t\t\t\tvar zips = document.getElementsByClassName(\"zip\");\r\n\t\t\t\tfor (let i = 0; i < zips.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"zip\")[i].innerText = zip;\r\n\t\t\t\t}\r\n\t\t\t\tvar citys = document.getElementsByClassName(\"city\");\r\n\t\t\t\tfor (let i = 0; i < citys.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"city\")[i].innerText = city;\r\n\t\t\t\t}\r\n\t\t\t\tvar insurances = document.getElementsByClassName(\"insurance\");\r\n\t\t\t\tfor (let i = 0; i < insurances.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insurance\")[i].innerText = insurance;\r\n\t\t\t\t}\r\n\t\t\t\tvar insuranceNrs = document.getElementsByClassName(\"insuranceNr\");\r\n\t\t\t\tfor (let i = 0; i < insuranceNrs.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insuranceNr\")[i].innerText = insuranceNr;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar birthdays = document.getElementsByClassName(\"birthday\");\r\n\t\t\t\tfor (let i = 0; i < birthdays.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"birthday\")[i].innerText = this.formate_date(birthday);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar phones = document.getElementsByClassName(\"phone\");\r\n\t\t\t\tfor (let i = 0; i < phones.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"phone\")[i].innerText = phone;\r\n\t\t\t\t}\r\n\r\n\t\t\t}, 10);\r\n\t\t});\r\n\t};\r\n\r\n\tformate_date(dateString) {\r\n\t\tlet date = '';\r\n\t\tif (dateString) {\r\n\t\t\tlet str = dateString.split(\" \");\r\n\t\t\tdate = str[0].split('-');\r\n\t\t\tdate = date[2] + '.' + date[1] + '.' + date[0];\r\n\t\t}\r\n\r\n\t\treturn date;\r\n\t}\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\t//let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t{/* <Box textAlign=\"center\" className=\"headerBar\">\r\n\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={this.getUrl(element.instanceLogo)} />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10\" >\r\n\t\t\t\t\t\t\t\t\t\t<div variant=\"h5\" className=\"title\" textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t{/* <Box bgcolor=\"background.paper\"  >\r\n\t\t\t\t\t\t\t\t\t\t<Box className=\"footerBar\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<div textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\tSeilte 3 von 3\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<style>{styles}</style>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","export const styles = `\r\n    /* Use the DejaVu Sans font for displaying and embedding in the PDF file. The standard PDF fonts do not support Unicode characters. */\r\n     h4{\r\n        font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n        }\r\n        p,div {\r\n            font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n    \r\n        }\r\n\r\n    /* The examples load the DejaVu Sans from the KendoReact CDN. Other fonts have to be hosted from your application.\r\n    The official site of the Deja Vu Fonts project is https://dejavu-fonts.github.io/. */\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Bold.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n`;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { PDFExport, savePDF } from '@progress/kendo-react-pdf';\r\nimport { Select, MenuItem, Container, Box, Switch, Typography, FormControl, InputLabel, TextField } from '@material-ui/core';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\nimport PageTemplate from './Components/PageTemplates';\r\nimport { MultiSelect } from '@progress/kendo-react-dropdowns';\r\n\r\n\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aufnahme: 'Aufnahme', Aktiv: 'Aktiv', Inakktiv: 'Inakktiv' };\r\n\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\nlet instances = {};\r\nlet instanceNames = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Bild', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : require(`assets/Images/patient.png`)} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }, filtering: false\r\n            },\r\n            { title: 'Anrede', field: 'salutation', lookup: salutationList, filtering: false },\r\n            { title: '*Vorname', field: 'firstName', filtering: false },\r\n            { title: '*Nachname', field: 'lastName', filtering: false },\r\n            { title: 'Straße', field: 'streetNr', filtering: false },\r\n            { title: 'PLZ', field: 'zipCode', filtering: false },\r\n            { title: 'Ort', field: 'city', filtering: false },\r\n\r\n            {\r\n               title: 'Geburtstag', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {this.formate_date(rowData.birthday)}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }, filtering: false\r\n            },\r\n            { title: 'Telefon 1', field: 'phone1', filtering: false },\r\n            { title: 'Telefon 2', field: 'phone2', filtering: false },\r\n            { title: 'E-Mail', field: 'email', filtering: false },\r\n\r\n            {\r\n               title: 'Bereich', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let resourcesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n\r\n\r\n                  }\r\n                  resourcesDatas = this.state.selected.map(selectedElement => {\r\n                     console.log('resource', selectedElement);\r\n                     return resourcesList.find(element => element.resources == selectedElement);\r\n                  })\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={resourcesList}\r\n                        getOptionLabel={(option) => option.resources}\r\n                        value={resourcesDatas}\r\n                        onChange={this.onChangeResources}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Bereich\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }, filtering: false\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Versicherung', field: 'insurance', editComponent: rowData => {\r\n                  console.log('rowData-------', this.state.insuranceData);\r\n                  if (rowData.rowData.id) {\r\n                     let insurance = rowData.rowData.insurance;\r\n                     if (this.state.isEditInsurance) {\r\n                        let insuranceData = this.state.insuranceList.find(element => element.insurances == insurance);\r\n                        this.setState({ isEditInsurance: false, insurance: insurance, insuranceData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.insuranceList}\r\n                     getOptionLabel={(option) => option.insurances}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     value={this.state.insuranceData}\r\n                     includeInputInList\r\n                     onChange={this.onChangeInsurance}\r\n                     renderInput={(params) => <TextField\r\n                        placeholder=\"Versicherung\"\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }, filtering: false\r\n            },\r\n            {\r\n               title: 'Versicherten-Nr.', field: 'insuranceNr', filtering: false\r\n            },\r\n            {\r\n               title: 'Leistungen', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              selectedServices.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        {/* <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList, props)} />\r\n                        </div> */}\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  let servicesDatas = [];\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n\r\n\r\n                  }\r\n                  servicesDatas = this.state.selectedservice.map(selectedElement => {\r\n                     console.log('resource', selectedElement);\r\n                     return servicesList.find(element => element.services == selectedElement);\r\n                  })\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={servicesList}\r\n                        getOptionLabel={(option) => option.services}\r\n                        onChange={this.onChangeServices}\r\n                        value={servicesDatas}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              placeholder=\"Leistungen\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }, filtering: false\r\n            },\r\n            {\r\n               title: '*Familiendoktor', field: 'familyDoctor', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let familyDoctor = rowData.rowData.familyDoctor;\r\n                     if (this.state.isEditfamilyDoctor) {\r\n                        let familyDoctorData = this.state.family_doctorsList.find(element => element.doctorName == familyDoctor);\r\n                        this.setState({ isEditfamilyDoctor: false, familyDoctor: familyDoctor, familyDoctorData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.family_doctorsList}\r\n                     getOptionLabel={(option) => option.doctorName}\r\n                     value={this.state.familyDoctorData}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeDoctor}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Familiendoktor\"\r\n\r\n                     />}\r\n                  />)\r\n               }, filtering: false\r\n            },\r\n            {\r\n               title: '*Zuweiser', field: 'caremanager', render: rowData => {\r\n                  let caremanager = rowData.caremanager;\r\n                  let caremanagerData = {};\r\n\r\n                  if (this.state.isEditCaremanager) {\r\n                     caremanagerData = this.state.caremanagersList.find(element => element.id == caremanager);\r\n                     if (caremanagerData) return (<div>{caremanagerData.firstName + ' ' + caremanagerData.lastName}</div>)\r\n\r\n                  }\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let caremanager = rowData.rowData.caremanager;                   \r\n                     if (this.state.isEditCaremanager) {\r\n                        let caremanagerData = this.state.caremanagersList.find(element => element.id == caremanager);\r\n                        this.setState({ isEditCaremanager: false, caremanager: caremanager, caremanagerData });\r\n                        console.log('caremanage', caremanagerData, caremanager);\r\n                     }\r\n\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.caremanagersList}\r\n                     getOptionLabel={(option) => (option.firstName + ' ' + option.lastName)}\r\n                     value={this.state.caremanagerData}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeCareManager}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Zuweiser\"\r\n\r\n                     />}\r\n                  />)\r\n               }, filtering: false\r\n            },\r\n            { title: 'Schlüssel-Nr.', field: 'keyNumber', type: 'numeric', filtering: false },\r\n            { title: 'Etage', field: 'floor', type: 'numeric', filtering: false },\r\n            {\r\n               title: 'Pflegegrad', field: 'degreeCare', lookup: degreeList, filtering: false\r\n            },\r\n            {\r\n               title: '*Apotheke', field: 'pharmacy', editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let pharmacy = rowData.rowData.pharmacy;\r\n                     if (this.state.isEditPharmacy) {\r\n                        let pharmacyData = this.state.pharmaciesList.find(element => element.pharmacyName == pharmacy);\r\n                        this.setState({ isEditPharmacy: false, pharmacy: pharmacy, pharmacyData })\r\n                     }\r\n                  }\r\n\r\n                  return (<Autocomplete\r\n                     options={this.state.pharmaciesList}\r\n                     getOptionLabel={(option) => option.pharmacyName}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangePharmacies}\r\n                     value={this.state.pharmacyData}\r\n\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n                        placeholder=\"Apotheke\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n               , filtering: false\r\n            },\r\n            {\r\n               title: 'Instance', field: 'instance_id', hidden: false, render: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else return <div></div>;\r\n\r\n               }, editComponent: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else {\r\n                     return <div></div>;\r\n                  }\r\n               },\r\n               filtering: false\r\n\r\n            },\r\n            {\r\n               title: 'Nutzergruppe', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        data={usersList}\r\n                        value={this.state.selectedUsers}\r\n                        onChange={this.onChangeUsers}\r\n                     />\r\n                  )\r\n\r\n               }\r\n               , filtering: false\r\n            },\r\n            {\r\n               title: 'Status', field: 'status', render: rowdata => {\r\n\r\n                  return (<Select\r\n                     labelId=\"demo-simple-select-label\"\r\n                     id=\"demo-simple-select\"\r\n                     value={this.state.statusArray[rowdata.id]}\r\n                     onChange={(event) => this.handleChange(event.target.value, rowdata)}\r\n                  >\r\n                     <MenuItem value='Aufnahme'>Aufnahme</MenuItem>\r\n                     <MenuItem value='Aktiv'>Aktiv</MenuItem>\r\n                     <MenuItem value='Inakktiv'>Inakktiv</MenuItem>\r\n                  </Select>)\r\n\r\n               },\r\n               lookup: statusList,\r\n\r\n\r\n            },\r\n            {\r\n               title: 'Notiz', field: 'note', render: rowData => {\r\n\r\n                  return (<div className=\"td-note\">{rowData.note}</div>)\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (rowData.rowData.id && rowData.rowData.note) {\r\n                     if (this.state.isEditNote) {\r\n                        console.log('rowData.rowData.note', rowData.rowData.note);\r\n                        this.setState({ note: rowData.rowData.note, isEditNote: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Add Note\"\r\n                        multiline\r\n                        rows={4}\r\n                        defaultValue=\"Default Value\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.note}\r\n                        onChange={this.handleChangeNote}\r\n                     />)\r\n               },\r\n               filtering: false\r\n            },\r\n            {\r\n               title: 'Benachrichtigungen', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }, filtering: false\r\n            },\r\n         ],\r\n         note: '',\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         isEditInsurance: true,\r\n         isEditfamilyDoctor: true,\r\n         isEditPharmacy: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: [],\r\n         family_doctorsList: [],\r\n         caremanagersList: [],\r\n         insuranceList: [],\r\n         familyDoctorData: null,\r\n         insuranceData: null,\r\n         pharmaciesList: [],\r\n         pharmacyData: null,\r\n         caremanager: '',\r\n         caremanagerData: null,\r\n         statusArray: [],\r\n         completed: false,\r\n         isEditNote: true,\r\n         isEditCaremanager: true\r\n\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n\r\n   }\r\n\r\n   handleChange(value, data) {\r\n      console.log('thishandle', value)\r\n      userService.editStatus({ id: data.id, status: value }).then(res => {\r\n         if (res) {\r\n            this.setState(prevState => {\r\n               const statusArray = [...prevState.statusArray];\r\n               statusArray[data.id] = value;\r\n\r\n               return { ...prevState, statusArray };\r\n            });\r\n         }\r\n         NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n      }).catch(error => {\r\n         NotificationManager.error('Es wurden keine Daten gespeichert');\r\n      });\r\n\r\n   }\r\n   handleChangeNote = (event) => {\r\n      console.log('event', event.target.value);\r\n      this.setState({ note: event.target.value });\r\n   }\r\n   formate_date(dateString) {\r\n      let date = '';\r\n      if (dateString) {\r\n         let str = dateString.split(\" \");\r\n         date = str[0].split('-');\r\n         date = date[2] + '.' + date[1] + '.' + date[0];\r\n      }\r\n\r\n      return date;\r\n   }\r\n   previewDocument(services, patient) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            folderDocs.map(element => {\r\n               relationDocs.push(element);\r\n            })\r\n         }\r\n      });\r\n\r\n      console.log('ssssssss1', relationDocs);\r\n      relationDocs = [...new Set(relationDocs)];\r\n      console.log('ssssssss2', relationDocs);\r\n      if (relationDocs.length) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         let name = patient.firstName + ' ' + patient.lastName;\r\n         let street = patient.streetNr;\r\n         let zip = patient.zipCode;\r\n         let city = patient.city;\r\n         let insurance = patient.insurance;\r\n         let insuranceNr = patient.insuranceNr;\r\n         let birthday = patient.birthday;\r\n         let phone = patient.phone1;\r\n         this.preViewDialog.current.setState({ name: name, street: street, zip: zip, city: city, insurance: insurance, insuranceNr: insuranceNr, birthday: birthday, phone: phone })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n\r\n         }, 2000);\r\n      }\r\n      else {\r\n         NotificationManager.warning(\"Es gibt keine Pflegeordner, die optionale Dienste anbieten.\");\r\n      }\r\n   }\r\n   generatePdf(len) {\r\n      console.log('instances', instances);\r\n      let InstanceInfo = { instanceName: instances.instanceName, instanceLogo: instances.instanceLogo, email: instances.email, name: instances.name };\r\n      localStorage.setItem('instanceInfo', JSON.stringify(InstanceInfo));\r\n      console.log('instanceInfo', InstanceInfo);\r\n      savePDF(ReactDOM.findDOMNode(document.getElementById('downloadArea')), {\r\n         pageTemplate: PageTemplate,\r\n         paperSize: [794, 1123],\r\n         margin: { top: 100, left: 50, right: 20, bottom: 70 }\r\n      });\r\n   }\r\n\r\n   formate(documentsLen, pageHight) {\r\n\r\n      let pages = [];\r\n      console.log('formate');\r\n      for (let i = 0; i < documentsLen; i++) {\r\n         let ipageHight = document.getElementById(\"page-\" + i).clientHeight;\r\n         if (ipageHight > pageHight) {\r\n            document.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n         }\r\n      }\r\n      return pages;\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event, familyDoctorData) => {\r\n      if (familyDoctorData) {\r\n         this.setState({ familyDoctor: familyDoctorData.doctorName, familyDoctorData })\r\n      }\r\n\r\n   }\r\n   onChangeCareManager = (event, caremanagerData) => {\r\n      console.log('caremanagersList', this.state.caremanagersList);\r\n      if (caremanagerData) {\r\n         this.setState({ caremanager: caremanagerData.id, caremanagerData })\r\n      }\r\n\r\n   }\r\n\r\n   onChangePharmacies = (event, pharmacyData) => {\r\n      if (pharmacyData) {\r\n         this.setState({ pharmacy: pharmacyData.pharmacyName, pharmacyData })\r\n      }\r\n   }\r\n   onChangeInsurance = (event, insuranceData) => {\r\n      if (insuranceData) {\r\n         this.setState({ insurance: insuranceData.insurances, insuranceData })\r\n      }\r\n   }\r\n   onChangeResources = (event, Resources) => {\r\n      let resources = Resources.map(element => element.resources);\r\n      this.setState({\r\n         selected: [...resources]\r\n      });\r\n   }\r\n   onChangeUsers = (event) => {\r\n      let selectedUsers = [...event.target.value];\r\n      if (selectedUsers.length == usersList.length - 1 || selectedUsers.indexOf('Alle') > -1) selectedUsers = ['Alle'];\r\n      this.setState({\r\n         selectedUsers: selectedUsers\r\n      });\r\n   }\r\n   onChangeServices = (event, Services) => {\r\n      let services = Services.map(element => element.services);\r\n\r\n      this.setState({\r\n         selectedservice: [...services]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\r\n         this.setState(state => {\r\n            let columns = state.columns;\r\n            state.columns[21].hidden = (this.instance_id ? true : false);\r\n            return {\r\n               columns\r\n            };\r\n         })\r\n\r\n\r\n         servicesList = [];\r\n         servicesList = res.services\r\n\r\n         resourcesList = res.resources;\r\n         usersList = res.users.map(ele => {\r\n            return ele.name;\r\n         })\r\n         usersList.push(\"Alle\");\r\n\r\n         let family_doctorsList = res.family_doctors;\r\n         let caremanagersList = res.caremanagers;\r\n\r\n         let insuranceList = res.insurances;\r\n         let pharmaciesList = res.pharmacies;\r\n\r\n         if (res.instances.length) {\r\n            instances = res.instances[0];\r\n\r\n         }\r\n         instanceNames = [];\r\n         res.instanceNames.map(ele => {\r\n\r\n            instanceNames[ele.id] = ele.instanceName;\r\n         })\r\n         console.log('resinstanceName', instanceNames)\r\n\r\n         let statusArray = [];\r\n         res.patients.forEach(element => {\r\n\r\n            statusArray[element.id] = element.status;\r\n         });\r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders, family_doctorsList, insuranceList, pharmaciesList, caremanagersList, statusArray };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n\r\n      let editableComponent = this.instance_id ? {\r\n         onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n\r\n                  newData.instance_id = this.instance_id;\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  newData.insurance = this.state.insurance;\r\n                  newData.familyDoctor = this.state.familyDoctor;\r\n                  newData.pharmacy = this.state.pharmacy;\r\n                  newData.birthday = this.state.birthday;\r\n                  newData.caremanager = this.state.caremanager;\r\n                  newData.serviceplan = this.state.serviceplan;\r\n                  newData.note = this.state.note;\r\n                  console.log('this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName', this.state.pharmacy);\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     const formData = new FormData()\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     userService.addPatients(formData).then(res => {\r\n                        const selected = [];\r\n                        const selectedservice = [];\r\n                        this.setState(prevState => {\r\n                           let data = [...prevState.data];\r\n                           data.push(res);\r\n                           return { ...prevState, data: [...data] };\r\n                        });\r\n\r\n                        this.setState({\r\n                           selected: selected,\r\n                           selectedservice: selectedservice,\r\n                           isEditServices: true,\r\n                           isEditResources: true,\r\n                           isEditServiceplan: true,\r\n                           isEditPharmacy: true,\r\n                           isEditUsers: true,\r\n                           isEditfamilyDoctor: true,\r\n                           isEditInsurance: true,\r\n                           isEditCaremanager: true,\r\n                           isEditNote: true,\r\n                           insurance: \"\",\r\n                           familyDoctor: \"\",\r\n                           pharmacy: '',\r\n                           birthday: '',\r\n                           caremanager: '',\r\n                           selectedUsers: []\r\n                        });\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                     }).catch(error => {\r\n                        NotificationManager.error(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n\r\n                     NotificationManager.warning(\"Bitte füllen Sie die erforderlichen Felder aus.\")\r\n                  }\r\n               }, 600);\r\n            }),\r\n         onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  const formData = new FormData()\r\n                  if (typeof newData.picture == 'object') {\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                  }\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                  if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                  if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                  if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                  if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                  if (this.state.caremanager) newData.caremanager = this.state.caremanager;\r\n                  newData.note = this.state.note;\r\n                  formData.append('data', JSON.stringify(newData));\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     userService.editPatients(formData).then(res => {\r\n                        if (oldData) {\r\n                           this.setState(prevState => {\r\n                              const data = [...prevState.data];\r\n                              data[data.indexOf(oldData)] = res;\r\n                              return { ...prevState, data };\r\n                           });\r\n                           const selected = [];\r\n                           const selectedservice = [];\r\n                           this.setState({\r\n                              selected: selected,\r\n                              selectedservice: selectedservice,\r\n                              isEditServices: true,\r\n                              isEditResources: true,\r\n                              isEditServiceplan: true,\r\n                              isEditPharmacy: true,\r\n                              isEditUsers: true,\r\n                              isEditfamilyDoctor: true,\r\n                              isEditInsurance: true,\r\n                              isEditCaremanager: true,\r\n                              isEditNote: true,\r\n                              caremanager: '',\r\n                              insurance: \"\",\r\n                              familyDoctor: \"\",\r\n                              pharmacy: '',\r\n                              birthday: '',\r\n                              selectedUsers: [],\r\n                              serviceplan: true\r\n                           });\r\n                        }\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                     }).catch(error => {\r\n                        NotificationManager.error(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n\r\n                     NotificationManager.warning(\"Bitte füllen Sie die erforderlichen Felder aus.\")\r\n                  }\r\n               }, 600);\r\n            }),\r\n         onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  console.log(';oldData', oldData.id);\r\n                  userService.deletePatients({ id: oldData.id }).then(res => {\r\n                     console.log('res', res);\r\n                     this.setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                     });\r\n                     NotificationManager.success(\"Die Daten werden erfolgreich gelöscht.\")\r\n                  })\r\n\r\n               }, 600);\r\n            }),\r\n      } : {\r\n            onRowUpdate: (newData, oldData) =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     const formData = new FormData()\r\n                     if (typeof newData.picture == 'object') {\r\n                        formData.append('file', newData.picture);\r\n                        newData.picture = '';\r\n                     }\r\n                     if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                     if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                     if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                     if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                     if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                     if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                     if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                     if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                        userService.editPatients(formData).then(res => {\r\n                           if (oldData) {\r\n                              this.setState(prevState => {\r\n                                 const data = [...prevState.data];\r\n                                 data[data.indexOf(oldData)] = res;\r\n                                 return { ...prevState, data };\r\n                              });\r\n                              const selected = [];\r\n                              const selectedservice = [];\r\n                              this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                           }\r\n\r\n                           NotificationManager.success(\"Die Daten werden erfolgreich gespeichert.\")\r\n                        }).catch(error => {\r\n                           NotificationManager.error(error.message);\r\n                        });\r\n                     }\r\n                     else {\r\n                        NotificationManager.warning(\"Bitte füllen Sie die erforderlichen Felder aus.\")\r\n                     }\r\n                  }, 600);\r\n               }),\r\n            onRowDelete: oldData =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     console.log(';oldData', oldData.id);\r\n                     userService.deletePatients({ id: oldData.id }).then(res => {\r\n                        console.log('res', res);\r\n                        this.setState(prevState => {\r\n                           const data = [...prevState.data];\r\n                           data.splice(data.indexOf(oldData), 1);\r\n                           return { ...prevState, data };\r\n                        });\r\n                        NotificationManager.success(\"Die Daten werden erfolgreich gelöscht.\")\r\n                     })\r\n                  }, 600);\r\n               }),\r\n         };\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap patients\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space patient-container\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     localization={{\r\n                        header: {\r\n                           actions: 'Funktionen'\r\n                        },\r\n                     }}\r\n                     options={{\r\n                        actionRowIndex: -1,\r\n                        filtering: true\r\n                     }}\r\n\r\n                     editable={editableComponent}\r\n                     actions={this.instance_id ? [\r\n                        {\r\n                           icon: 'folder_outlined_icon',\r\n                           tooltip: 'Download Care Folder',\r\n                           onClick: (event, rowData) => {\r\n                              let currentService = JSON.parse(rowData.services);\r\n                              this.previewDocument(currentService, rowData)\r\n                           }\r\n                        }\r\n                     ] : []}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}