{"version":3,"sources":["routes/Tables/PatientsTable/index.js"],"names":["insuranceList","pharmaciesList","family_doctorsList","resourcesList","servicesList","PatientsTable","props","state","columns","title","field","render","rowData","src","picture","defaultUrl","className","editComponent","type","onChange","e","target","files","selectedResources","JSON","parse","resources","options","selected","id","isEditResources","setState","onSelectedChanged","lookup","selectedServices","services","name","console","log","currentService","isEditServices","selectedservice","data","this","user","localStorage","getItem","instance_id","userService","showPatients","pagination","then","res","map","ele","push","label","value","family_doctors","insurances","pharmacies","prevState","patients","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","stringify","formData","FormData","append","addPatients","onRowUpdate","oldData","editPatients","indexOf","onRowDelete","deletePatients","splice","Component"],"mappings":"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","file":"static/js/51.be6fb158.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport MultiSelect from \"@khanacademy/react-multi-select\";\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nlet insuranceList = {};\r\nlet pharmaciesList = {};\r\nlet family_doctorsList = {};\r\n\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation' },\r\n            { title: 'First Name', field: 'firstName' },\r\n            { title: 'Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n            { title: 'Birthday', field: 'birthday' },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        options={resourcesList}\r\n                        selected={selectedResources}\r\n                     />\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n                     <MultiSelect\r\n\r\n                        options={resourcesList}\r\n                        selected={this.state.selected}\r\n                        onSelectedChanged={selected => this.setState({ selected })}\r\n\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: 'Insurance', field: 'insurance', lookup: insuranceList\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        name=\"services\"\r\n                        options={servicesList}\r\n                        selected={selectedServices}\r\n                     />\r\n                  )\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        options={servicesList}\r\n                        selected={this.state.selectedservice}\r\n                        onSelectedChanged={selectedservice => { console.log(\"selectedservice\", selectedservice); this.setState({ selectedservice }) }}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: 'Family Doctor', field: 'familyDoctor', lookup: family_doctorsList\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare'\r\n            },\r\n            {\r\n               title: 'Pharmacy', field: 'pharmacy', lookup: pharmaciesList\r\n            },\r\n            { title: 'User group', field: 'userGroup' },\r\n            { title: 'Status', field: 'status' },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n\r\n      };\r\n\r\n\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user_id'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         resourcesList = [];\r\n         servicesList = [];\r\n         res.services.map(ele => {\r\n            servicesList.push({ label: ele.services, value: ele.services });\r\n         })\r\n         res.resources.map(ele => {\r\n            resourcesList.push({ label: ele.resources, value: ele.resources });\r\n         })\r\n\r\n         res.family_doctors.map(ele => {\r\n            family_doctorsList[ele.family_doctors] = ele.family_doctors;\r\n         })\r\n\r\n         res.insurances.map(ele => {\r\n            insuranceList[ele.insurances] = ele.insurances;\r\n         })\r\n         res.pharmacies.map(ele => {\r\n            pharmaciesList[ele.pharmacies] = ele.pharmacies;\r\n         })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            return { ...prevState, data };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 const formData = new FormData()\r\n                                 formData.append('file', newData.picture);\r\n                                 newData.picture = '';\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 userService.addPatients(formData).then(res => {\r\n                                    const selected = [];\r\n                                    const selectedservice = [];\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.push(res);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                    this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true });\r\n                                 });\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 newData.services = JSON.stringify(this.state.selectedservice);\r\n                                 formData.append('data', JSON.stringify(newData));\r\n\r\n                                 userService.editPatients(formData).then(res => {\r\n                                    if (oldData) {\r\n                                       this.setState(prevState => {\r\n                                          const data = [...prevState.data];\r\n                                          data[data.indexOf(oldData)] = res;\r\n                                          return { ...prevState, data };\r\n                                       });\r\n                                       const selected = [];\r\n                                       const selectedservice = [];\r\n                                       this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true });\r\n                                    }\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}