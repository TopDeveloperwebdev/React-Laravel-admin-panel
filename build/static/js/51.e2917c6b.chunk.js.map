{"version":3,"sources":["routes/Tables/PatientsTable/index.js"],"names":["insuranceList","pharmaciesList","family_doctorsList","resourcesList","servicesList","PatientsTable","props","state","columns","title","field","render","rowData","src","picture","defaultUrl","className","editComponent","type","onChange","e","target","files","selectedResources","JSON","parse","resources","options","selected","onSelectedChanged","setState","lookup","selectedServices","services","selectedservice","data","this","names","user","localStorage","getItem","instance_id","console","log","userService","showPatients","pagination","then","res","map","ele","push","label","value","family_doctors","insurances","pharmacies","prevState","patients","id","center","maxWidth","px","xs","lg","editable","onRowAdd","newData","Promise","resolve","setTimeout","stringify","formData","FormData","append","addPatients","onRowUpdate","oldData","editPatients","indexOf","onRowDelete","deletePatients","splice","Component"],"mappings":"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","file":"static/js/51.e2917c6b.chunk.js","sourcesContent":["/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Container, Box, Switch, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport MultiSelect from \"@khanacademy/react-multi-select\";\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nlet insuranceList = {};\r\nlet pharmaciesList = {};\r\nlet family_doctorsList = {};\r\n\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation' },\r\n            { title: 'First Name', field: 'firstName' },\r\n            { title: 'Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n            { title: 'Birthday', field: 'birthday' },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        options={resourcesList}\r\n                        selected={selectedResources}\r\n                     />\r\n                  )\r\n\r\n               },\r\n               editComponent: props => {\r\n\r\n                  return (\r\n                     <MultiSelect\r\n                        options={resourcesList}\r\n                        selected={this.state.selected}\r\n                        onSelectedChanged={selected => this.setState({ selected })}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: 'Insurance', field: 'insurance', lookup: insuranceList\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <MultiSelect\r\n                        options={servicesList}\r\n                        selected={selectedServices}\r\n                     />\r\n                  )\r\n               },\r\n               editComponent: props => {\r\n                  return (\r\n                     <MultiSelect\r\n                        options={servicesList}\r\n                        selected={this.state.selectedservice}\r\n                        onSelectedChanged={selectedservice => this.setState({ selectedservice })}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: 'Family Doctor', field: 'familyDoctor', lookup: family_doctorsList\r\n            },\r\n            { title: 'Key number', field: 'keyNumber' },\r\n            { title: 'Floor', field: 'floor' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare'\r\n            },\r\n            {\r\n               title: 'Pharmacy', field: 'pharmacy', lookup: pharmaciesList\r\n            },\r\n            { title: 'User group', field: 'userGroup' },\r\n            { title: 'Status', field: 'status' },\r\n         ],\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: []\r\n\r\n      };\r\n\r\n\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n      this.names = [\r\n         'Oliver Hansen',\r\n         'Van Henry',\r\n         'April Tucker',\r\n         'Ralph Hubbard',\r\n         'Omar Alexander',\r\n         'Carlos Abbott',\r\n         'Miriam Wagner',\r\n         'Bradley Wilkerson',\r\n         'Virginia Andrews',\r\n         'Kelly Snyder',\r\n      ];\r\n      this.defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n      let user = JSON.parse(localStorage.getItem('user_id'));\r\n      this.instance_id = user.instance_id;\r\n      console.log('res', this.instance_id);\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n         res.services.map(ele => {\r\n            servicesList.push({ label: ele.services, value: ele.services });\r\n         })\r\n         res.resources.map(ele => {\r\n            resourcesList.push({ label: ele.resources, value: ele.resources });\r\n         })\r\n\r\n         res.family_doctors.map(ele => {\r\n            family_doctorsList[ele.family_doctors] = ele.family_doctors;\r\n         })\r\n\r\n         res.insurances.map(ele => {\r\n            insuranceList[ele.insurances] = ele.insurances;\r\n         })\r\n         res.pharmacies.map(ele => {\r\n            pharmaciesList[ele.pharmacies] = ele.pharmacies;\r\n         })\r\n         // console.log('this.insta' , this.insurances);  \r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            return { ...prevState, data };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.familiy-directors\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     editable={{\r\n                        onRowAdd: newData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n\r\n                                 newData.instance_id = this.instance_id;\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 const formData = new FormData()\r\n                                 formData.append('file', newData.picture);\r\n                                 newData.picture = '';\r\n                                 formData.append('data', JSON.stringify(newData));\r\n                                 userService.addPatients(formData).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.push(res);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 });\r\n\r\n                              }, 600);\r\n                           }),\r\n                        onRowUpdate: (newData, oldData) =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 const formData = new FormData()\r\n                                 if (typeof newData.picture == 'object') {\r\n                                    formData.append('file', newData.picture);\r\n                                    newData.picture = '';\r\n                                 }\r\n                                 newData.resources = JSON.stringify(this.state.selected);\r\n                                 formData.append('data', JSON.stringify(newData));\r\n\r\n                                 userService.editPatients(formData).then(res => {\r\n                                    if (oldData) {\r\n                                       this.setState(prevState => {\r\n                                          const data = [...prevState.data];\r\n                                          data[data.indexOf(oldData)] = res;\r\n                                          return { ...prevState, data };\r\n                                       });\r\n                                    }\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                        onRowDelete: oldData =>\r\n                           new Promise(resolve => {\r\n                              setTimeout(() => {\r\n                                 resolve();\r\n                                 console.log(';oldData', oldData.id);\r\n                                 userService.deletePatients({ id: oldData.id }).then(res => {\r\n                                    console.log('res', res);\r\n                                    this.setState(prevState => {\r\n                                       const data = [...prevState.data];\r\n                                       data.splice(data.indexOf(oldData), 1);\r\n                                       return { ...prevState, data };\r\n                                    });\r\n                                 })\r\n                              }, 600);\r\n                           }),\r\n                     }}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}