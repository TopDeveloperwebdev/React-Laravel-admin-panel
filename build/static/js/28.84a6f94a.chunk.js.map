{"version":3,"sources":["../node_modules/@material-ui/icons/Close.js","routes/Tables/PatientsTable/Components/PageTemplates.js","routes/Tables/Carefolders/Components/PreViewDialog.js","routes/Tables/Carefolders/Components/styles.js","routes/Tables/PatientsTable/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","PageTemplate","logo","url","split","console","log","instanceInfo","JSON","parse","localStorage","getItem","style","position","top","left","id","src","this","getUrl","instanceLogo","height","width","bottom","right","fontSize","props","pageNum","totalPages","color","instanceName","email","React","PreviewDialgo","state","open","instance","title","content","name","street","zip","city","insurance","insuranceNr","birthday","phone","pdfExportComponent","createRef","setState","setTimeout","names","document","getElementsByClassName","i","length","innerText","streets","zips","citys","insurances","insuranceNrs","birthdays","formate_date","phones","dateString","date","isTrue","Dialog","onClose","closeDialog","bind","aria-labelledby","className","DialogContent","Box","onClick","onCloseDialog","selectedDocumentList","map","element","index","key","variant","textAlign","dangerouslySetInnerHTML","__html","Component","insuranceList","pharmaciesList","salutationList","Herr","Frau","degreeList","1","2","3","4","5","statusList","Aktiv","Inaktiv","Unvollst√§ndig","family_doctorsList","resourcesList","servicesList","usersList","instances","instanceNames","PatientsTable","handleChangeDate","event","target","onChangeDoctor","doctor","familyDoctor","doctorName","onChangePharmacies","pharmacy","pharmacyName","onChangeInsurance","onChangeResources","Resources","resources","selected","SelectedUsers","selectedUsers","indexOf","onChangeServices","Services","services","selectedservice","columns","field","render","rowData","picture","defaultUrl","editComponent","type","onChange","e","files","lookup","defaultValue","InputLabelProps","shrink","selectedResources","isEditResources","multiple","options","getOptionLabel","option","renderInput","params","label","placeholder","autoComplete","includeInputInList","margin","selectedServices","currentService","isEditServices","hidden","find","x","instance_id","userGroup","isEditUsers","onChangeUsers","size","checked","serviceplan","isEditServiceplan","data","documentsList","folders","downloadDocs","preViewDialog","patient","relationDocs","forEach","folder","service","documents","push","Set","filter","a","firstName","lastName","streetNr","zipCode","phone1","current","openDialog","generatePdf","NotificationManager","warning","len","InstanceInfo","setItem","stringify","savePDF","ReactDOM","getElementById","pageTemplate","paperSize","documentsLen","pageHight","ipageHight","clientHeight","paddingBottom","user","userService","showPatients","pagination","then","res","users","family_doctors","pharmacies","ele","prevState","patients","editableComponent","onRowAdd","newData","Promise","resolve","formData","FormData","append","addPatients","catch","error","alert","message","onRowUpdate","oldData","editPatients","onRowDelete","deletePatients","splice","center","maxWidth","px","xs","lg","actionRowIndex","editable","actions","icon","tooltip","previewDocument","ref"],"mappings":"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","file":"static/js/28.84a6f94a.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","import * as React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nexport default class PageTemplate extends React.Component {\r\n    getUrl(logo) {\r\n        let url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n        //  let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n       // let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpbeI4IdEQfeCLO9h67Z9SptqluMsBzJG-Ww&usqp=CAU\";\r\n       console.log('url' , url)\r\n        return url\r\n    }\r\n    render() {\r\n        let instanceInfo = JSON.parse(localStorage.getItem('instanceInfo'));\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{ position: \"absolute\", top: \"50px\", left: \"60px\" }}\r\n                    id=\"header\"\r\n                >\r\n                    <img src={this.getUrl(instanceInfo.instanceLogo)} height=\"auto\" width=\"100px\"/>\r\n                </div>\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", right: \"30px\", fontSize: \"12px\" }}\r\n                    id=\"footer\"\r\n                >\r\n\r\n                    Seite {this.props.pageNum} von {this.props.totalPages}\r\n                </div>\r\n                <div\r\n                    style={{ position: \"absolute\", bottom: \"30px\", left: \"60px\", fontSize: \"12px\", color: \"#b6b6b6\" }}\r\n                    id=\"footer\"\r\n                >\r\n                    <div>{instanceInfo.instanceName}</div>\r\n                    Mail :  {instanceInfo.email}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Confirmation dialog component\r\n*/\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { Button, Box, Typography, Dialog, Container, DialogActions, DialogContent, TextField, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { SmallTitleBar } from '../../../../components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { styles } from './styles.js';\r\nclass PreviewDialgo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.pdfExportComponent = React.createRef();\r\n\t}\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tinstance: null,\r\n\t\ttitle: '',\r\n\t\tcontent: '',\r\n\t\tname: '',\r\n\t\tstreet: '',\r\n\t\tzip: '',\r\n\t\tcity: '',\r\n\t\tinsurance: '',\r\n\t\tinsuranceNr: '',\r\n\t\tbirthday: '',\r\n\t\tphone: ''\r\n\r\n\t};\r\n\r\n\t//Define function for open confirmation dialog box\r\n\topenDialog() {\r\n\t\tthis.setState({ open: true }, () => {\r\n\t\t\tlet { name, street, zip, city, insurance, insuranceNr, birthday, phone } = this.state;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tvar names = document.getElementsByClassName(\"name\");\r\n\t\t\t\tfor (let i = 0; i < names.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"name\")[i].innerText = name;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar streets = document.getElementsByClassName(\"street\");\r\n\t\t\t\tfor (let i = 0; i < streets.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"street\")[i].innerText = street;\r\n\t\t\t\t}\r\n\t\t\t\tvar zips = document.getElementsByClassName(\"zip\");\r\n\t\t\t\tfor (let i = 0; i < zips.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"zip\")[i].innerText = zip;\r\n\t\t\t\t}\r\n\t\t\t\tvar citys = document.getElementsByClassName(\"city\");\r\n\t\t\t\tfor (let i = 0; i < citys.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"city\")[i].innerText = city;\r\n\t\t\t\t}\r\n\t\t\t\tvar insurances = document.getElementsByClassName(\"insurance\");\r\n\t\t\t\tfor (let i = 0; i < insurances.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insurance\")[i].innerText = insurance;\r\n\t\t\t\t}\r\n\t\t\t\tvar insuranceNrs = document.getElementsByClassName(\"insuranceNr\");\r\n\t\t\t\tfor (let i = 0; i < insuranceNrs.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"insuranceNr\")[i].innerText = insuranceNr;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar birthdays = document.getElementsByClassName(\"birthday\");\r\n\t\t\t\tfor (let i = 0; i < birthdays.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"birthday\")[i].innerText = this.formate_date(birthday);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar phones = document.getElementsByClassName(\"phone\");\r\n\t\t\t\tfor (let i = 0; i < phones.length; i++) {\r\n\t\t\t\t\tdocument.getElementsByClassName(\"phone\")[i].innerText = phone;\r\n\t\t\t\t}\r\n\r\n\t\t\t}, 10);\r\n\t\t});\r\n\t};\r\n\r\n\tformate_date(dateString) {\r\n\t\tlet date = '';\r\n\t\tif (dateString) {\r\n\t\t\tlet str = dateString.split(\" \");\r\n\t\t\tdate = str[0].split('-');\r\n\t\t\tdate = date[2] + '.' + date[1] + '.' + date[0];\r\n\t\t}\r\n\r\n\t\treturn date;\r\n\t}\r\n\t//Define function for close confirmation dialog box \r\n\tcloseDialog() {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\r\n\t//Define function for close confirmation dialog box and callback for delete item \r\n\tonCloseDialog(isTrue) {\r\n\t\tthis.setState({ open: false });\r\n\t};\r\n\tgetUrl(logo) {\r\n\t\tlet url = '/backend_latest/file_storage/' + logo.split('/')[5];\r\n\t\t//let defaultUrl = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTbZrzTIuXAe01k5wgrhWGzPRPRliQygmBCA&usqp=CAU\";\r\n\t\treturn url\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<Dialog\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonClose={this.closeDialog.bind(this)}\r\n\t\t\t\taria-labelledby=\"responsive-dialog-title\"\r\n\t\t\t\tclassName=\"confirmation-dialog\"\r\n\r\n\t\t\t>\r\n\t\t\t\t<DialogContent className=\"p-10 downloadPaper\">\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<CloseIcon className=\"closeBtn\" onClick={() => this.onCloseDialog(false)}></CloseIcon>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<div id=\"downloadArea\">\r\n\t\t\t\t\t\t{this.props.selectedDocumentList.map((element, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Box key={index} className=\"pageContainer\" id={`page-${index}`}>\r\n\t\t\t\t\t\t\t\t\t{/* <Box textAlign=\"center\" className=\"headerBar\">\r\n\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img src={this.getUrl(element.instanceLogo)} />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10\" >\r\n\t\t\t\t\t\t\t\t\t\t<div variant=\"h5\" className=\"title\" textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t{element.title}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"p-10 contentHtml\">\r\n\r\n\t\t\t\t\t\t\t\t\t\t<div dangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t\t\t\t\t__html: element.content\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t{/* <Box bgcolor=\"background.paper\"  >\r\n\t\t\t\t\t\t\t\t\t\t<Box className=\"footerBar\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<div textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstance Name : {element.instanceName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box pt={1} fontSize=\"body2.fontSize\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact Email : {element.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\tSeilte 3 von 3\r\n\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t\t\t\t\t</Box> */}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<style>{styles}</style>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</DialogContent>\r\n\r\n\t\t\t</Dialog>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PreviewDialgo;","export const styles = `\r\n    /* Use the DejaVu Sans font for displaying and embedding in the PDF file. The standard PDF fonts do not support Unicode characters. */\r\n     h4{\r\n        font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n        }\r\n        p,div {\r\n            font-family: \"DejaVu Sans\", \"Arial\", sans-serif;\r\n    \r\n        }\r\n\r\n    /* The examples load the DejaVu Sans from the KendoReact CDN. Other fonts have to be hosted from your application.\r\n    The official site of the Deja Vu Fonts project is https://dejavu-fonts.github.io/. */\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Bold.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n\r\n    @font-face {\r\n        font-family: \"DejaVu Sans\";\r\n        font-weight: bold;\r\n        font-style: italic;\r\n        src: url(\"https://kendo.cdn.telerik.com/2017.2.621/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf\") format(\"truetype\");\r\n    }\r\n`;","/**\r\n * Search Table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { PDFExport, savePDF } from '@progress/kendo-react-pdf';\r\nimport { Container, Box, Switch, FormControl, InputLabel, TextField } from '@material-ui/core';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { userService } from '../../../_services';\r\n//Components\r\nimport { SmallTitleBar } from 'components/GlobalComponents';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport FolderOutlinedIcon from '@material-ui/icons/FolderOutlined';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport PreViewDialog from '../Carefolders/Components/PreViewDialog';\r\nimport PageTemplate from './Components/PageTemplates';\r\n\r\nlet insuranceList = [];\r\nlet pharmaciesList = [];\r\nlet salutationList = { Herr: 'Herr', Frau: 'Frau' };\r\nlet degreeList = { 1: 1, 2: 2, 3: 3, 4: 4, 5: 5 };\r\nlet statusList = { Aktiv: 'Aktiv', Inaktiv: 'Inaktiv', Unvollst√§ndig: 'Unvollst√§ndig' };\r\nlet family_doctorsList = [];\r\nlet resourcesList = [];\r\nlet servicesList = [];\r\nlet usersList = [];\r\nlet instances = {};\r\nlet instanceNames = [];\r\n\r\nclass PatientsTable extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         columns: [\r\n            {\r\n               title: 'Picture', field: 'picture', render: rowData => <img src={rowData.picture ? rowData.picture : this.defaultUrl} className=\"logo-td bdr-rad-50\" />,\r\n               editComponent: props => {\r\n                  return (\r\n                     <input\r\n                        type='file'\r\n                        onChange={e => props.onChange(e.target.files[0])}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Salutation', field: 'salutation', lookup: salutationList },\r\n            { title: '*First Name', field: 'firstName' },\r\n            { title: '*Last Name', field: 'lastName' },\r\n            { title: 'Street nr', field: 'streetNr' },\r\n            { title: 'zip code', field: 'zipCode' },\r\n            { title: 'City', field: 'city' },\r\n\r\n            {\r\n               title: 'Birthday', field: 'birthday', render: rowData => {\r\n                  return (<div>\r\n                     {this.formate_date(rowData.birthday)}\r\n                  </div>)\r\n               },\r\n               editComponent: rowData => {\r\n                  return (\r\n                     <TextField\r\n                        className=\"full-width\"\r\n                        id=\"date\"\r\n                        type=\"date\"\r\n                        defaultValue=\"2017-05-24\"\r\n                        InputLabelProps={{\r\n                           shrink: true,\r\n                        }}\r\n                        value={this.state.birthday}\r\n                        onChange={this.handleChangeDate}\r\n                     />)\r\n               }\r\n            },\r\n            { title: 'Phone 1', field: 'phone1' },\r\n            { title: 'Phone 2', field: 'phone2' },\r\n            { title: 'E-Mail', field: 'email' },\r\n\r\n            {\r\n               title: 'Resources', field: 'resources', render: props => {\r\n                  let selectedResources = [];\r\n                  selectedResources = JSON.parse(props.resources);\r\n                  if (!selectedResources) {\r\n                     selectedResources = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedResources.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selected = JSON.parse(rowData.rowData.resources);\r\n                     if (!selected) {\r\n                        selected = [];\r\n                     }\r\n                     if (this.state.isEditResources) {\r\n                        this.setState({ selected: selected, isEditResources: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={resourcesList}\r\n                        getOptionLabel={(option) => option.resources}\r\n                        defaultValue={[resourcesList[0]]}\r\n                        onChange={this.onChangeResources}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              label=\"Multiple values\"\r\n                              placeholder=\"Favorites\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n\r\n            },\r\n\r\n            {\r\n               title: '*Insurance', field: 'insurance', editComponent: rowData => {\r\n\r\n                  return (<Autocomplete\r\n\r\n                     options={insuranceList}\r\n                     getOptionLabel={(option) => option.insurances}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeInsurance}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        label=\"Select Insurance\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: '*Insurance Nr', field: 'insuranceNr'\r\n            },\r\n            {\r\n               title: 'Services', field: 'services', render: props => {\r\n                  let selectedServices = JSON.parse(props.services);\r\n\r\n                  if (!selectedServices) {\r\n                     selectedServices = [];\r\n                  }\r\n                  return (\r\n                     <div className=\"serviceContainer\">\r\n                        <div>\r\n                           {\r\n                              selectedServices.map((value, index) => {\r\n                                 return (<div key={index}>{value}</div>)\r\n                              })\r\n                           }\r\n                        </div>\r\n                        {/* <div>\r\n                           <FolderOutlinedIcon onClick={() => this.previewDocument(servicesList, props)} />\r\n                        </div> */}\r\n                     </div>\r\n\r\n                  )\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData.rowData.id', rowData.rowData.id);\r\n                  if (rowData.rowData.id) {\r\n                     let currentService = JSON.parse(rowData.rowData.services);\r\n                     console.log('currentService', currentService);\r\n                     if (!currentService) {\r\n                        currentService = [];\r\n                     }\r\n                     if (this.state.isEditServices) {\r\n                        this.setState({ selectedservice: currentService, isEditServices: false })\r\n                     }\r\n                  }\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={servicesList}\r\n                        getOptionLabel={(option) => option.services}\r\n                        defaultValue={[servicesList[0]]}\r\n                        onChange={this.onChangeServices}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              label=\"Multiple values\"\r\n                              placeholder=\"Favorites\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            {\r\n               title: '*Family Doctor', field: 'familyDoctor', editComponent: rowData => {\r\n                  return (<Autocomplete\r\n                     options={family_doctorsList}\r\n                     getOptionLabel={(option) => option.doctorName}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangeDoctor}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        label=\"Select Family doctor\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            { title: 'Key number', field: 'keyNumber', type: 'numeric' },\r\n            { title: 'Floor', field: 'floor', type: 'numeric' },\r\n            {\r\n               title: 'Degree of care', field: 'degreeCare', lookup: degreeList\r\n            },\r\n            {\r\n               title: '*Pharmacy', field: 'pharmacy', editComponent: rowData => {\r\n                  return (<Autocomplete\r\n                     options={pharmaciesList}\r\n                     getOptionLabel={(option) => option.pharmacyName}\r\n                     id=\"auto-complete\"\r\n                     autoComplete\r\n                     includeInputInList\r\n                     onChange={this.onChangePharmacies}\r\n                     renderInput={(params) => <TextField\r\n                        id=\"input-with-icon-textfield\"\r\n                        label=\"Select Pharmacy\"\r\n                        {...params}\r\n                        margin=\"normal\"\r\n\r\n                     />}\r\n                  />)\r\n               }\r\n            },\r\n            {\r\n               title: 'Instance', field: 'instance_id', hidden: false, render: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else return <div></div>;\r\n\r\n               }, editComponent: rowData => {\r\n                  let temp = null;\r\n                  temp = instanceNames.find((x, i) => i == rowData.rowData.instance_id);\r\n                  if (temp) {\r\n                     return (<div>\r\n                        {instanceNames[rowData.rowData.instance_id]}\r\n                     </div>)\r\n                  }\r\n                  else {\r\n                     return <div></div>;\r\n                  }\r\n               },\r\n\r\n            },\r\n            {\r\n               title: 'Related Users', field: 'userGroup', render: props => {\r\n                  let selectedUsers = [];\r\n                  selectedUsers = JSON.parse(props.userGroup);\r\n\r\n                  if (!selectedUsers) {\r\n                     selectedUsers = [];\r\n                  }\r\n                  return (\r\n                     <div>\r\n                        {\r\n                           selectedUsers.map((value, index) => {\r\n                              return (<div key={index}>{value}</div>)\r\n                           })\r\n                        }\r\n                     </div>\r\n\r\n                  )\r\n\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  if (rowData.rowData.id) {\r\n                     let selectedUsers = JSON.parse(rowData.rowData.userGroup);\r\n                     if (!selectedUsers) {\r\n                        selectedUsers = [];\r\n                     }\r\n\r\n                     if (this.state.isEditUsers) {\r\n                        this.setState({ selectedUsers: selectedUsers, isEditUsers: false })\r\n                     }\r\n                  }\r\n\r\n                  return (\r\n\r\n                     <Autocomplete\r\n                        multiple\r\n                        id=\"tags-standard\"\r\n                        options={usersList}\r\n                        getOptionLabel={(option) => option.name}\r\n                        defaultValue={[usersList[0]]}\r\n                        onChange={this.onChangeUsers}\r\n                        renderInput={(params) => (\r\n                           <TextField\r\n                              {...params}\r\n                              variant=\"standard\"\r\n                              label=\"Multiple values\"\r\n                              placeholder=\"Favorites\"\r\n                           />\r\n                        )}\r\n                     />\r\n                  )\r\n\r\n               }\r\n            },\r\n            { title: 'Status', field: 'status', lookup: statusList },\r\n            {\r\n               title: 'Serviceplan', field: 'serviceplan', render: rowData => {\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={rowData.serviceplan ? true : false}\r\n                  />)\r\n\r\n               },\r\n               editComponent: rowData => {\r\n                  console.log('rowData', rowData);\r\n                  if (this.state.isEditServiceplan && rowData.rowData.id) {\r\n                     this.setState({ serviceplan: rowData.rowData.serviceplan ? true : false, isEditServiceplan: false });\r\n                  }\r\n                  return (<Switch\r\n                     size=\"small\"\r\n                     color=\"primary\"\r\n                     checked={this.state.serviceplan}\r\n                     onChange={e => this.setState({ serviceplan: e.target.checked })}\r\n                  />)\r\n\r\n               }\r\n            },\r\n         ],\r\n\r\n         data: [],\r\n         selected: [],\r\n         selectedservice: [],\r\n         selectedUsers: [],\r\n         isEditServices: true,\r\n         isEditResources: true,\r\n         isEditUsers: true,\r\n         isEditServiceplan: true,\r\n         serviceplan: true,\r\n         insurance: '',\r\n         pharmacy: '',\r\n         birthday: '',\r\n         documentsList: [],\r\n         folders: [],\r\n         downloadDocs: [],\r\n\r\n      };\r\n\r\n      this.preViewDialog = React.createRef();\r\n\r\n   }\r\n\r\n   formate_date(dateString) {\r\n      let date = '';\r\n      if (dateString) {\r\n         let str = dateString.split(\" \");\r\n         date = str[0].split('-');\r\n         date = date[2] + '.' + date[1] + '.' + date[0];\r\n      }\r\n\r\n      return date;\r\n   }\r\n   previewDocument(services, patient) {\r\n      console.log('previewDocument', services);\r\n\r\n\r\n\r\n      let relationDocs = [];\r\n      this.state.folders.forEach(folder => {\r\n         if (services.indexOf(folder.service) > -1) {\r\n            let folderDocs = JSON.parse(folder.documents);\r\n            folderDocs.map(element => {\r\n               relationDocs.push(element);\r\n            })\r\n         }\r\n      });\r\n\r\n      console.log('ssssssss1', relationDocs);\r\n      relationDocs = [...new Set(relationDocs)];\r\n      console.log('ssssssss2', relationDocs);\r\n      if (relationDocs.length) {\r\n         let downloadDocs = this.state.documentsList.filter((a) => {\r\n            return relationDocs.indexOf(a.id) > -1;\r\n         })\r\n         let name = patient.firstName + ' ' + patient.lastName;\r\n         let street = patient.streetNr;\r\n         let zip = patient.zipCode;\r\n         let city = patient.city;\r\n         let insurance = patient.insurance;\r\n         let insuranceNr = patient.insuranceNr;\r\n         let birthday = patient.birthday;\r\n         let phone = patient.phone1;\r\n         this.preViewDialog.current.setState({ name: name, street: street, zip: zip, city: city, insurance: insurance, insuranceNr: insuranceNr, birthday: birthday, phone: phone })\r\n         this.setState({ downloadDocs: [...downloadDocs] });\r\n\r\n         this.preViewDialog.current.openDialog();\r\n         setTimeout(() => {\r\n            this.generatePdf(this.state.downloadDocs.length);\r\n\r\n         }, 2000);\r\n      }\r\n      else {\r\n         NotificationManager.warning(\"Es gibt keine Pflegeordner, die optionale Dienste anbieten.\");\r\n      }\r\n   }\r\n   generatePdf(len) {\r\n      console.log('instances', instances);\r\n      let InstanceInfo = { instanceName: instances.instanceName, instanceLogo: instances.instanceLogo, email: instances.email, name: instances.name };\r\n      localStorage.setItem('instanceInfo', JSON.stringify(InstanceInfo));\r\n      console.log('instanceInfo', InstanceInfo);\r\n      savePDF(ReactDOM.findDOMNode(document.getElementById('downloadArea')), {\r\n         pageTemplate: PageTemplate,\r\n         paperSize: [794, 1123],\r\n         margin: { top: 70, left: 50, right: 20, bottom: 70 }\r\n      });\r\n   }\r\n\r\n   formate(documentsLen, pageHight) {\r\n\r\n      let pages = [];\r\n      console.log('formate');\r\n      for (let i = 0; i < documentsLen; i++) {\r\n         let ipageHight = document.getElementById(\"page-\" + i).clientHeight;\r\n         if (ipageHight > pageHight) {\r\n            document.getElementById(\"page-\" + i).style.paddingBottom = (pageHight - (ipageHight % pageHight)) + 'px';\r\n         }\r\n      }\r\n      return pages;\r\n   }\r\n   handleChangeDate = (event) => {\r\n      this.setState({ birthday: event.target.value });\r\n   }\r\n   onChangeDoctor = (event, doctor) => {\r\n      if (!doctor) doctor = {};\r\n      this.setState({ familyDoctor: doctor.doctorName });\r\n\r\n   }\r\n\r\n   onChangePharmacies = (event, pharmacy) => {\r\n      if (!pharmacy) pharmacy = {};\r\n      this.setState({ pharmacy: pharmacy.pharmacyName });\r\n   }\r\n   onChangeInsurance = (event, insurance) => {\r\n\r\n      if (!insurance) insurance = {};\r\n      this.setState({ insurance: insurance.insurances });\r\n   }\r\n   onChangeResources = (event, Resources) => {\r\n      let resources = Resources.map(element => element.resources);\r\n      this.setState({\r\n         selected: [...resources]\r\n      });\r\n   }\r\n\r\n   onChangeResources = (event, SelectedUsers) => {\r\n\r\n      let selectedUsers = SelectedUsers.map(element => element.name);\r\n      if (selectedUsers.length == usersList.length - 1 || selectedUsers.indexOf('all') > -1) selectedUsers = ['all'];\r\n      this.setState({\r\n         selectedUsers: [...selectedUsers]\r\n      });\r\n   }\r\n   onChangeServices = (event, Services) => {\r\n      let services = Services.map(element => element.services);\r\n\r\n      this.setState({\r\n         selectedservice: [...services]\r\n      });\r\n   }\r\n   componentWillMount() {\r\n      this.defaultUrl = \"http://base.mastermedi-1.vautronserver.de/backend_latest/file_storage/1602322608icon-patient-kl.png\";\r\n      let user = JSON.parse(localStorage.getItem('user'));\r\n      this.instance_id = user.instance_id;\r\n\r\n      userService.showPatients({ instance_id: this.instance_id, pagination: 1 }).then(res => {\r\n\r\n         this.setState(state => {\r\n            let columns = state.columns;\r\n            state.columns[20].hidden = (this.instance_id ? true : false);\r\n            return {\r\n               columns\r\n            };\r\n         })\r\n\r\n\r\n         servicesList = [];\r\n         servicesList = res.services\r\n\r\n         resourcesList = res.resources;\r\n         usersList = res.users;\r\n          usersList.push({name : 'app'});\r\n         family_doctorsList = res.family_doctors;\r\n\r\n\r\n         insuranceList = res.insurances;\r\n         pharmaciesList = res.pharmacies;\r\n\r\n         if (res.instances.length) {\r\n            instances = res.instances[0];\r\n\r\n         }\r\n         instanceNames = [];\r\n         res.instanceNames.map(ele => {\r\n\r\n            instanceNames[ele.id] = ele.instanceName;\r\n         })\r\n         console.log('resinstanceName', instanceNames)\r\n\r\n\r\n\r\n\r\n         this.setState(prevState => {\r\n            const data = res.patients;\r\n            const documentsList = res.documents;\r\n            const folders = res.folders;\r\n            return { ...prevState, data, documentsList, folders };\r\n         });\r\n\r\n      })\r\n\r\n   }\r\n\r\n   render() {\r\n\r\n\r\n      let editableComponent = this.instance_id ? {\r\n         onRowAdd: newData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n\r\n                  newData.instance_id = this.instance_id;\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  newData.insurance = this.state.insurance;\r\n                  newData.familyDoctor = this.state.familyDoctor;\r\n                  newData.pharmacy = this.state.pharmacy;\r\n                  newData.birthday = this.state.birthday;\r\n                  newData.serviceplan = this.state.serviceplan;\r\n                  if (this.state.pharmacy && this.state.familyDoctor && newData.firstName && newData.lastName) {\r\n                     const formData = new FormData()\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     userService.addPatients(formData).then(res => {\r\n                        const selected = [];\r\n                        const selectedservice = [];\r\n                        this.setState(prevState => {\r\n                           let data = [...prevState.data];\r\n                           data.push(res);\r\n                           return { ...prevState, data: [...data] };\r\n                        });\r\n\r\n                        this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [] });\r\n                     }).catch(error => {\r\n                        console.log('erro', error);\r\n                        alert(error.message);\r\n                     });\r\n                  }\r\n                  else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowUpdate: (newData, oldData) =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  const formData = new FormData()\r\n                  if (typeof newData.picture == 'object') {\r\n                     formData.append('file', newData.picture);\r\n                     newData.picture = '';\r\n                  }\r\n                  console.log('dddddddddd---', this.state.selectedservice);\r\n                  newData.resources = JSON.stringify(this.state.selected);\r\n                  newData.services = JSON.stringify(this.state.selectedservice);\r\n                  newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                  if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                  if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                  if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                  if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                  if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                  formData.append('data', JSON.stringify(newData));\r\n                  if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                     userService.editPatients(formData).then(res => {\r\n                        if (oldData) {\r\n                           this.setState(prevState => {\r\n                              const data = [...prevState.data];\r\n                              data[data.indexOf(oldData)] = res;\r\n                              return { ...prevState, data };\r\n                           });\r\n                           const selected = [];\r\n                           const selectedservice = [];\r\n                           this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                        }\r\n                     })\r\n                  } else {\r\n                     alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                  }\r\n\r\n               }, 600);\r\n            }),\r\n         onRowDelete: oldData =>\r\n            new Promise(resolve => {\r\n               setTimeout(() => {\r\n                  resolve();\r\n                  console.log(';oldData', oldData.id);\r\n                  userService.deletePatients({ id: oldData.id }).then(res => {\r\n                     console.log('res', res);\r\n                     this.setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.splice(data.indexOf(oldData), 1);\r\n                        return { ...prevState, data };\r\n                     });\r\n                  })\r\n               }, 600);\r\n            }),\r\n      } : {\r\n            onRowUpdate: (newData, oldData) =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     const formData = new FormData()\r\n                     if (typeof newData.picture == 'object') {\r\n                        formData.append('file', newData.picture);\r\n                        newData.picture = '';\r\n                     }\r\n                     if (this.state.selected.length) newData.resources = JSON.stringify(this.state.selected);\r\n                     if (this.state.selectedservice.length) newData.services = JSON.stringify(this.state.selectedservice);\r\n                     if (this.state.selectedUsers.length) newData.userGroup = JSON.stringify(this.state.selectedUsers);\r\n                     if (this.state.insurance) newData.insurance = this.state.insurance;\r\n                     if (this.state.familyDoctor) newData.familyDoctor = this.state.familyDoctor;\r\n                     if (this.state.pharmacy) newData.pharmacy = this.state.pharmacy;\r\n                     if (this.state.birthday) newData.birthday = this.state.birthday;\r\n                     if (this.state.serviceplan) newData.serviceplan = this.state.serviceplan;\r\n                     formData.append('data', JSON.stringify(newData));\r\n                     if (newData.pharmacy && newData.familyDoctor && newData.firstName && newData.lastName) {\r\n                        userService.editPatients(formData).then(res => {\r\n                           if (oldData) {\r\n                              this.setState(prevState => {\r\n                                 const data = [...prevState.data];\r\n                                 data[data.indexOf(oldData)] = res;\r\n                                 return { ...prevState, data };\r\n                              });\r\n                              const selected = [];\r\n                              const selectedservice = [];\r\n                              this.setState({ selected: selected, selectedservice: selectedservice, isEditServices: true, isEditResources: true, isEditServiceplan: true, isEditUsers: true, insurance: \"\", familyDoctor: \"\", pharmacy: '', birthday: '', selectedUsers: [], serviceplan: true });\r\n                           }\r\n                        })\r\n                     } else {\r\n                        alert(\"Bitte f√ºllen Sie die erforderlichen Felder aus.\");\r\n                     }\r\n\r\n                  }, 600);\r\n               }),\r\n            onRowDelete: oldData =>\r\n               new Promise(resolve => {\r\n                  setTimeout(() => {\r\n                     resolve();\r\n                     console.log(';oldData', oldData.id);\r\n                     userService.deletePatients({ id: oldData.id }).then(res => {\r\n                        console.log('res', res);\r\n                        this.setState(prevState => {\r\n                           const data = [...prevState.data];\r\n                           data.splice(data.indexOf(oldData), 1);\r\n                           return { ...prevState, data };\r\n                        });\r\n                     })\r\n                  }, 600);\r\n               }),\r\n         };\r\n      return (\r\n         <div className=\"tables-wrapper search-table-wrap\">\r\n            <SmallTitleBar\r\n               title={<IntlMessages id=\"sidebar.patients\" />}\r\n               center\r\n            />\r\n            <Container maxWidth=\"lg\">\r\n               <Box px={{ xs: '12px', lg: 0 }} className=\"page-space patient-container\">\r\n                  <MaterialTable\r\n                     title={<IntlMessages id=\"sidebar.patients\" />}\r\n                     columns={this.state.columns}\r\n                     data={this.state.data}\r\n                     options={{\r\n                        actionRowIndex: -1\r\n                     }}\r\n                     editable={editableComponent}\r\n                     actions={this.instance_id ? [\r\n                        {\r\n                           icon: 'folder_outlined_icon',\r\n                           tooltip: 'Download Care Folder',\r\n                           onClick: (event, rowData) => {\r\n                              let currentService = JSON.parse(rowData.services);\r\n                              this.previewDocument(currentService, rowData)\r\n                           }\r\n                        }\r\n                     ] : []}\r\n                  />\r\n               </Box>\r\n            </Container>\r\n            <PreViewDialog\r\n               ref={this.preViewDialog}\r\n               selectedDocumentList={this.state.downloadDocs}\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default PatientsTable;\r\n\r\n\r\n"],"sourceRoot":""}